name: 'main'

on:
  push:
  repository_dispatch:
    types: [digest_latest_Arch]

jobs:
  DigestXML_and_build_Raptor:
    runs-on: ubuntu-20.04
    defaults:
      run:
        shell: bash
    steps:
    - name: ssh-agent
      uses: webfactory/ssh-agent@v0.7.0
      with: 
        ssh-private-key: |
          ${{ secrets.SSH_PRIVATE_KEY_VERIFIC_RS }}
          ${{ secrets.SSH_PRIVATE_KEY_OPENFPGA }}
          ${{ secrets.SSH_PRIVATE_KEY_FOEDAG }}
          ${{ secrets.SSH_PRIVATE_KEY_TCL }}
          ${{ secrets.SSH_PRIVATE_KEY_YOSYS_VERIFIC }}
          ${{ secrets.SSH_PRIVATE_KEY_RTL_BENCH }}
          ${{ secrets.SSH_PRIVATE_KEY_YOSYS }}
          ${{ secrets.SSH_PRIVATE_KEY_YOSYS_PLUGINS }}
          ${{ secrets.SSH_PRIVATE_KEY_ABC }}
          ${{ secrets.SSH_PRIVATE_KEY_LOGIC_SYNTH }}
          ${{ secrets.SSH_PRIVATE_KEY_JIRA_TESTCASE }}
          ${{ secrets.SSH_PRIVATE_KEY_LITEX_RS }}
          ${{ secrets.SSH_PRIVATE_KEY_TOOLS }}
          ${{ secrets.SSH_PRIVATE_KEY_RAPTOR_TOOLS }}
          ${{ secrets.SSH_PRIVATE_KEY_IP_CATALOG }}
          ${{ secrets.SSH_PRIVATE_KEY_BACKEND }}
          ${{ secrets.SSH_PRIVATE_KEY_EMBEDDED_COMMON_DEV }}
          ${{ secrets.SSH_PRIVATE_KEY_U_BOOT_DEV }}
          ${{ secrets.SSH_PRIVATE_KEY_ZEPHYR_DEV }}
          ${{ secrets.SSH_PRIVATE_KEY_OPENFPGA_PD_CASTOR_RS }}

    - name: Checkout code
      uses: actions/checkout@v3

    - name: Checkout openfpga-pd-castor-rs
      #if: ${{ github.event_name == 'repository_dispatch' }}
      run: |
          git clone git@github.com:RapidSilicon/openfpga-pd-castor-rs.git

    - name:  checkout tag and copy Arch files
      if: ${{ github.event_name == 'repository_dispatch' }}
      run: |
          echo "payload: ${{ github.event.client_payload.new_tag }}"
          cd openfpga-pd-castor-rs && git checkout ${{ github.event.client_payload.new_tag }} && cd - && bash .github/copy_arch.sh

    - name: Add and Push
      if: ${{ github.event_name == 'repository_dispatch' }}
      uses: GuillaumeFalourd/git-commit-push@v1.3
      with:
        email: nadeem.yaseen@rapidsilicon.com
        name: nadeemyaseen-rs
        commit_message: Added XMLs files from ${{ github.event.client_payload.new_tag }}
        files: "*.xml"
        target_branch: xml_${{ github.event.client_payload.new_tag }}
          
    - name: Create PR
      if: ${{ github.event_name == 'repository_dispatch' }}
      uses: repo-sync/pull-request@v2
      with:
          source_branch: xml_${{ github.event.client_payload.new_tag }}                   # branch having xmls files
          destination_branch: "main"                                                      # name of branch on which PR go
          pr_title: "Pulling XMLs ${{ github.event.client_payload.new_tag }} into main"   # Title of pull request
          pr_body: "An automated PR to checkin New XMLs tag"                              # Full markdown support, requires pr_title
          pr_reviewer: "alain-rs"                                                         # Comma-separated list (no spaces)
          pr_assignee: "nadeemyaseen-rs"                                                  # Comma-separated list (no spaces)
          pr_label: "openfpga_castor_pd_XMLs"                                             # Comma-separated list (no spaces)
          pr_allow_empty: true                                                            # Creates pull request even if there are no changes
          github_token: ${{ secrets.GITHUB_TOKEN }}

    - name: automerge XMLs PR
      if: ${{ github.event_name == 'repository_dispatch' }}
      uses: "pascalgn/automerge-action@v0.15.6"
      env:
          GITHUB_TOKEN: "${{ secrets.OPENFPGA_CASTOR_XML_MERGE }}"
          MERGE_LABELS: "openfpga_castor_pd_XMLs"
          MERGE_REMOVE_LABELS: "openfpga_castor_pd_XMLs"
          MERGE_METHOD: "merge"
          MERGE_COMMIT_MESSAGE: "Merge the XMLs version ${{ github.event.client_payload.new_tag }}"
          MERGE_FORKS: "false"
          MERGE_RETRIES: "2"
          MERGE_RETRY_SLEEP: "10000"
          MERGE_REQUIRED_APPROVALS: "0"
          MERGE_DELETE_BRANCH: "true"
          MERGE_ERROR_FAIL: "true"


    - name: Install dependencies
      run: |
        bash .github/workflows/install_ubuntu_dependencies_build.sh
#        bash .github/workflows/install_litex_ubuntu.sh

    - name: Use ccache
      uses: hendrikmuhs/ccache-action@v1.2.3
      with:
        key: linux-${{ matrix.mode }}

    - name: Configure shell
      run: |
        echo 'CC=gcc-11' >> $GITHUB_ENV
        echo 'CXX=g++-11' >> $GITHUB_ENV
        echo 'PATH=/usr/lib/ccache:'"$PATH" >> $GITHUB_ENV
        echo 'PREFIX=/tmp/raptor_gui-install' >> $GITHUB_ENV
        echo "$PREFIX" >> $GITHUB_PATH
        echo "ADDITIONAL_CMAKE_OPTIONS='-DMY_CXX_WARNING_FLAGS="-W -Wall -Wextra -Wno-unused-parameter -Wno-unused-variable -Werror -UNDEBUG"'" >> $GITHUB_ENV
        echo 'RULE_MESSAGES=off' >> $GITHUB_ENV
        echo 'LC_ALL=en_US.utf-8' >> $GITHUB_ENV
        echo 'LANG=en_US.utf-8' >> $GITHUB_ENV

    - name: Show shell configuration
      run: |
        env
        which cmake && cmake --version
        which make && make --version
        which swig && swig -version
        which python && python --version
        which ninja && ninja --version
        which tclsh && echo 'puts [info patchlevel];exit 0' | tclsh
        which $CC && $CC --version
        which $CXX && $CXX --version

    - name: Build Raptor
      run: |
        make regression
        ./build/bin/raptor --batch --mute --script tests/Testcases/and2_gemini/raptor.tcl

    - name: Setup Netlist Generation Environment
      run: |
        mkdir Backend/OpenFPGA/build && cd Backend/OpenFPGA/build && ln -s ../../../build/bin openfpga && cd -
        mkdir -p $GITHUB_WORKSPACE/v1.0.6/gemini_compact_10x8
        mkdir -p $GITHUB_WORKSPACE/v1.0.6/gemini_compact_82x68
        OPENFPGA_PATH=$GITHUB_WORKSPACE/Backend/OpenFPGA 
        apt-get install -y libxml2-utils
        python3 -m pip install --upgrade --no-cache-dir pip
        python3 -m pip install mako PyYAML
        cd openfpga-pd-castor-rs
        git clone https://github.com/ganeshgore/spydrnet-physical.git /var/tmp/spydrnet-physical
        git clone https://github.com/ganeshgore/spydrnet.git /var/tmp/spydrnet
        wget --directory-prefix=/var/tmp/ https://raw.githubusercontent.com/ganeshgore/spydrnet-physical/main/requirements.txt
        python3 -m pip install -r /var/tmp/requirements.txt
        python3 -m pip install IPython
        python3 -m pip list
        echo "export PYTHON_EXEC=python3" >> LoadTools.sh
        echo "export OPENFPGA_PATH=${OPENFPGA_PATH}" >> LoadTools.sh
        echo "export PYTHONPATH=/var/tmp/spydrnet-physical:/var/tmp/spydrnet" >> LoadTools.sh
        cd k6n8_TSMC16nm_7.5T/FPGA10x8_gemini_compact_pnr
        make generate_arch MAKO_ARCH=gemini_compact && make run_openfpga && mv fabric_task/run001/k6n8_vpr/top/MIN_ROUTE_CHAN_WIDTH/SRC $GITHUB_WORKSPACE/v1.0.6/gemini_compact_10x8
        cd $GITHUB_WORKSPACE/openfpga-pd-castor-rs/FPGA82x68_gemini_compact_pnr
        make generate_arch MAKO_ARCH=gemini_compact && make run_openfpga && mv fabric_task/run001/k6n8_vpr/top/MIN_ROUTE_CHAN_WIDTH/SRC $GITHUB_WORKSPACE/v1.0.6/gemini_compact_82x68
        cd $GITHUB_WORKSPACE && tar -cvzf netlist_v1.0.6.tar.gz v1.0.6         
        
    - name: Cache Netlist
      uses: actions/cache@v3.2.6
      with:
        path: ./netlist_v1.0.6.tar.gz
        key: ${{ github.repository }}_${{ github.run_id }}

  BitStream_Simulation:
    needs: DigestXML_and_build_Raptor 
    runs-on: bitstream_sim
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Download Netlist from Cache
      uses: actions/cache@v3.2.6
      with:
        path: ./netlist_v1.0.6.tar.gz
        key: ${{ github.repository }}_${{ github.run_id }}

    - name: Put Netlist on Server Path
      run: |
        tar -xvzf netlist_v1.0.6.tar.gz
        mv -v v1.0.6 /nfs_scratch/scratch/eda/nadeem/netlist_gen
        #ln -s 
    