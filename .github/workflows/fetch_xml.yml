name: 'Fetch and Test XML changes'

on:
  push:
  repository_dispatch:
    types: [digest_latest_Release]

jobs:
  XML_Digest_and_raptor_build:
    runs-on: ubuntu-latest
    outputs:
      output1: ${{ steps.branch_name.outputs.b_name }}
    defaults:
      run:
        shell: bash
    strategy:
      fail-fast: false
      matrix:
        updates:
        - xml
        - ric
    env:
      MODE: ${{ matrix.updates }}
  
    steps:
    - name: ssh-agent
      uses: webfactory/ssh-agent@v0.7.0
      with: 
        ssh-private-key: |
          ${{ secrets.SSH_PRIVATE_KEY_VERIFIC_RS }}
          ${{ secrets.SSH_PRIVATE_KEY_OPENFPGA }}
          ${{ secrets.SSH_PRIVATE_KEY_FOEDAG }}
          ${{ secrets.SSH_PRIVATE_KEY_TCL }}
          ${{ secrets.SSH_PRIVATE_KEY_YOSYS_VERIFIC }}
          ${{ secrets.SSH_PRIVATE_KEY_RTL_BENCH }}
          ${{ secrets.SSH_PRIVATE_KEY_YOSYS }}
          ${{ secrets.SSH_PRIVATE_KEY_YOSYS_PLUGINS }}
          ${{ secrets.SSH_PRIVATE_KEY_ABC }}
          ${{ secrets.SSH_PRIVATE_KEY_LOGIC_SYNTH }}
          ${{ secrets.SSH_PRIVATE_KEY_JIRA_TESTCASE }}
          ${{ secrets.SSH_PRIVATE_KEY_LITEX_RS }}
          ${{ secrets.SSH_PRIVATE_KEY_TOOLS }}
          ${{ secrets.SSH_PRIVATE_KEY_RAPTOR_TOOLS }}
          ${{ secrets.SSH_PRIVATE_KEY_IP_CATALOG }}
          ${{ secrets.SSH_PRIVATE_KEY_BACKEND }}
          ${{ secrets.SSH_PRIVATE_KEY_EMBEDDED_COMMON_DEV }}
          ${{ secrets.SSH_PRIVATE_KEY_U_BOOT_DEV }}
          ${{ secrets.SSH_PRIVATE_KEY_ZEPHYR_DEV }}
          ${{ secrets.SSH_PRIVATE_KEY_OPENFPGA_PD_CASTOR_RS }}
          ${{ secrets.SSH_RS_FPGA_PRIMITIVES }}

    - name: Checkout code
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: switch to branch
      id: branch_name
      run: |
            git branch -a 
            BRANCH='${{ matrix.updates }}_0.9.17'
            echo "b_name=$BRANCH" >> "$GITHUB_OUTPUT"
            set +e
            git ls-remote --exit-code --heads origin $BRANCH >/dev/null 2>&1
            EXIT_CODE=$?
            if [[ $EXIT_CODE == '0' ]]; then
                echo "Git branch '$BRANCH' exists in the remote repository"
                main_last_commit=`git log -1 --pretty=format:"%H"`
                git checkout ${{ matrix.updates }}_0.9.17
                git pull origin ${{ matrix.updates }}_0.9.17
                git reset --hard $main_last_commit
            elif [[ $EXIT_CODE == '2' ]]; then
                echo "Git branch '$BRANCH' does not exist in the remote repository"
            fi

    - name: Download Latest Release
      uses: robinraju/release-downloader@v1.8
      with:
        repository: "RapidSilicon/SpicaProduct"
        latest: true
        tarBall: true
        zipBall: true
        token: "${{ secrets.OPENFPGA_CASTOR_XML_MERGE }}"

    - name:  Unzip and copy all the files
      run: |
          echo "payload: 0.9.17"
          for file in $(ls -1 $GITHUB_WORKSPACE/*.tar.gz)
          do
          echo $file
          tar -xvf $file
          done
          ls -l 

    - name: show status
      run: git status

    - name: set the extension
      run: |
        case "${{ matrix.updates }}" in
            "ric")
                echo "updates are from ${{ matrix.updates }}"
                extension=tcl
                echo "EXTENSION=$extension" >> $GITHUB_ENV
                echo "path_to_commit=etc/**/**/*.tcl" >> $GITHUB_ENV
                ;;
            "xml")
                echo "updates are from ${{ matrix.updates }}"
                extension=xml
                echo "EXTENSION=$extension" >> $GITHUB_ENV
                echo "path_to_commit=etc/devices/**/*.xml etc/device.xml etc/devices/**/*.csv" >> $GITHUB_ENV
                ;;
            *)
                echo "Invalid value: ${{ matrix.updates }}"
                ;;
        esac

    - name: Check changes are related
      id: is_change
      run: |
        any_diff=`git status --porcelain '*.${{ env.EXTENSION }}'`
        echo $any_diff
        if [ ! -z "$any_diff" ]
        then
           echo "has_changed=true" >> $GITHUB_OUTPUT
        else
          echo "nothing changed in ${{ matrix.updates }} files"
        fi

    - name: Install dependencies
      if: contains(steps.is_change.outputs.has_changed, 'true')
      run: |
        bash .github/workflows/install_ubuntu_dependencies_build.sh
        sudo apt-get install -y xmlstarlet
#        bash .github/workflows/install_litex_ubuntu.sh

    - name: Setup Python Packages
      run: |
        pip3 install orderedmultidict
        pip3 install psutil

    - name: Use ccache
      if: contains(steps.is_change.outputs.has_changed, 'true')
      uses: hendrikmuhs/ccache-action@v1.2.3
      with:
        key: linux-${{ matrix.updates }}

    - name: Configure shell
      run: |
        echo 'CC=gcc-11' >> $GITHUB_ENV
        echo 'CXX=g++-11' >> $GITHUB_ENV
        echo 'PATH=/usr/lib/ccache:'"$PATH" >> $GITHUB_ENV
        echo 'PREFIX=/tmp/raptor_gui-install' >> $GITHUB_ENV
        echo "$PREFIX" >> $GITHUB_PATH
        echo "ADDITIONAL_CMAKE_OPTIONS='-DMY_CXX_WARNING_FLAGS="-W -Wall -Wextra -Wno-unused-parameter -Wno-unused-variable -Werror -UNDEBUG"'" >> $GITHUB_ENV
        echo 'RULE_MESSAGES=off' >> $GITHUB_ENV
        echo 'LC_ALL=en_US.utf-8' >> $GITHUB_ENV
        echo 'LANG=en_US.utf-8' >> $GITHUB_ENV

    - name: Show shell configuration
      if: contains(steps.is_change.outputs.has_changed, 'true')
      run: |
        env
        which cmake && cmake --version
        which make && make --version
        which swig && swig -version
        which python && python --version
        which ninja && ninja --version
        which tclsh && echo 'puts [info patchlevel];exit 0' | tclsh
        which $CC && $CC --version
        which $CXX && $CXX --version

    - name: Build Raptor
      if: contains(steps.is_change.outputs.has_changed, 'true')
      run: |
        mkdir build
        #make release CPU_CORES=2

    - name: Extract device name
      if: contains(steps.is_change.outputs.has_changed, 'true')
      run: |
         changes_in=`grep -o 'etc/devices/[^[:space:]]*' MANIFEST.TXT | cut -d/ -f3 | sort | uniq`
         echo ""
         echo "Change folder are $changes_in"
         echo ""
         for c in $changes_in
         do

                xmlstarlet sel -t -m "//device[internal[@type='vpr_arch']/@file='$c/gemini_vpr.xml']" -v "@name" -n etc/device.xml | while read -r d; do
                echo "mkdir -p $(pwd)/results/$d && cd $(pwd)/results/$d && $(pwd)/build/bin/raptor --batch --device $d --script $(pwd)/tests/Testcases/and2_pin_table_test/run_raptor.tcl" >> build/raptor_run
                done
         done

    - name: Tar the Artifacts
      if: contains(steps.is_change.outputs.has_changed, 'true')
      run: |
          tar -cvzf  build.tar.gz build Raptor_Tools yosys_verific_rs         

    - name: Add and Push files
      if: contains(steps.is_change.outputs.has_changed, 'true')
      uses: GuillaumeFalourd/git-commit-push@v1.3
      with:
        email: nadeem.yaseen@rapidsilicon.com
        name: nadeemyaseen-rs
        commit_message: Added ${{ matrix.updates }} files from 0.9.17
        files: "${{ env.path_to_commit }}"
        target_branch: ${{ matrix.updates }}_0.9.17
        force: true

    - name: Upload Raptor Build
      if: contains(steps.is_change.outputs.has_changed, 'true')
      uses: actions/upload-artifact@v3
      with:
          name: Raptor_build
          path: build.tar.gz

    - name: Create Raptor Build failure Issue in Jira
      if: failure () && contains(steps.is_change.outputs.has_changed, 'true')
      uses: tomhjp/gh-action-jira-create@v0.1.3
      with:
          project: EDA
          issuetype: "Bug"
          summary: "Raptor build fail while digesting release 0.9.17."
          description: "In an attempt to merge the release 0.9.17 in Raptor, the Raptor compilation. The link to the failed job is ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          extraFields: '{"assignee": { "id": "6239bc27a95758006959b14d"}}'
      env:
            JIRA_BASE_URL: https://rapidsilicon.atlassian.net
            JIRA_USER_EMAIL: nadeem.yaseen@rapidsilicon.com
            JIRA_API_TOKEN: ${{ secrets.JIRA_API_TOKEN }}


  XML_Digest_and_test:
    needs: XML_Digest_and_raptor_build
    runs-on: digest_release
    container:
      image: ubuntu:22.04
    outputs:
      output3: ${{ steps.test_result_failure.outputs.test_fail }}
    defaults:
      run:
        shell: bash
    
    steps:
    - name: Iinstall pre-requisit
      run: |
            apt update && apt upgrade -y && apt install sudo git openssh-client software-properties-common wget dialog apt-utils -y  
    - name: ssh-agent
      uses: webfactory/ssh-agent@v0.7.0
      with: 
        ssh-private-key: |
          ${{ secrets.SSH_PRIVATE_KEY_VERIFIC_RS }}
          ${{ secrets.SSH_PRIVATE_KEY_OPENFPGA }}
          ${{ secrets.SSH_PRIVATE_KEY_FOEDAG }}
          ${{ secrets.SSH_PRIVATE_KEY_TCL }}
          ${{ secrets.SSH_PRIVATE_KEY_YOSYS_VERIFIC }}
          ${{ secrets.SSH_PRIVATE_KEY_RTL_BENCH }}
          ${{ secrets.SSH_PRIVATE_KEY_YOSYS }}
          ${{ secrets.SSH_PRIVATE_KEY_YOSYS_PLUGINS }}
          ${{ secrets.SSH_PRIVATE_KEY_ABC }}
          ${{ secrets.SSH_PRIVATE_KEY_LOGIC_SYNTH }}
          ${{ secrets.SSH_PRIVATE_KEY_JIRA_TESTCASE }}
          ${{ secrets.SSH_PRIVATE_KEY_LITEX_RS }}
          ${{ secrets.SSH_PRIVATE_KEY_TOOLS }}
          ${{ secrets.SSH_PRIVATE_KEY_RAPTOR_TOOLS }}
          ${{ secrets.SSH_PRIVATE_KEY_IP_CATALOG }}
          ${{ secrets.SSH_PRIVATE_KEY_BACKEND }}
          ${{ secrets.SSH_PRIVATE_KEY_EMBEDDED_COMMON_DEV }}
          ${{ secrets.SSH_PRIVATE_KEY_U_BOOT_DEV }}
          ${{ secrets.SSH_PRIVATE_KEY_ZEPHYR_DEV }}
          ${{ secrets.SSH_PRIVATE_KEY_OPENFPGA_PD_CASTOR_RS }}
          ${{ secrets.SSH_RS_FPGA_PRIMITIVES }}

    - name: Checkout code
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: switch to branch
      run: |
            git config --global --add safe.directory /__w/Raptor/Raptor
            git branch -a
            git pull
            BRANCH=${{needs.XML_Digest_and_raptor_build.outputs.output1}}
            set +e
            git ls-remote --exit-code --heads origin $BRANCH >/dev/null 2>&1
            EXIT_CODE=$?
            if [[ $EXIT_CODE == '0' ]]; then
                echo "Git branch '$BRANCH' exists in the remote repository"
                git checkout $BRANCH
            elif [[ $EXIT_CODE == '2' ]]; then
                echo "Git branch '$BRANCH' does not exist in the remote repository"
            fi
            git branch

    - name: Install dependencies
      run: |
        export DEBIAN_FRONTEND=noninteractive
        export DEBIAN_PRIORITY=critical
        echo "en_US.UTF-8 UTF-8" > /etc/locale.gen
        TZ=UTC
        ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && echo $TZ > /etc/timezone
        echo "keyboard-configuration keyboard-configuration/layout select USA" | debconf-set-selections \
        && echo "keyboard-configuration keyboard-configuration/variant select USA" | debconf-set-selections \
        && DEBIAN_FRONTEND=noninteractive apt-get install -y keyboard-configuration
        bash .github/workflows/install_ubuntu_dependencies_build.sh
        sudo apt-get install -y xmlstarlet
#        bash .github/workflows/install_litex_ubuntu.sh

    - name: Setup Python Packages
      run: |
        pip3 install orderedmultidict
        pip3 install psutil
        pip3 install ray

    - name: Download Raptor Build
      uses: actions/download-artifact@v3
      with:
          name: Raptor_build

    - name: Extract Raptor artifacts
      run: |
          pwd
          tar -xzf build.tar.gz
          ls -l && cd build && ls -l
          mkdir /home/runner
          ln -s /__w /home/runner/work
                  

    - name: Run the test
      run: |
          if [ -f ./build/raptor_run ]
          then
              cat ./build/raptor_run
              ls -l /home/runner/work/Raptor/Raptor/tests/Testcases/and2_pin_table_test/run_raptor.tcl
              #python3 .github/bin/execute_parallel.py --filename ./build/raptor_run
          else
              echo "This test file raptor_run does not exist so skipping it"
          fi         

    - name: Set the result
      if: ${{ failure() }}
      id: test_result_failure
      run: |
            echo "test_fail=fail" >> "$GITHUB_OUTPUT"

# separate job for create PR and create jira because test job has matrix strategy and we need to set only one job output variable as result of job
# The create jira job is set to run always and create PR job is run only when all the tests are passed.
# Now if any matrix job fail then set the result step will run and then create jira job having step create jira will run otherwise it will be skipped. 

  Create_PR:
    needs: [XML_Digest_and_test,XML_Digest_and_raptor_build]
    runs-on: ubuntu-latest
  
    steps:
    - name: ssh-agent
      uses: webfactory/ssh-agent@v0.7.0
      with: 
        ssh-private-key: |
          ${{ secrets.SSH_PRIVATE_KEY_VERIFIC_RS }}
          ${{ secrets.SSH_PRIVATE_KEY_OPENFPGA }}
          ${{ secrets.SSH_PRIVATE_KEY_FOEDAG }}
          ${{ secrets.SSH_PRIVATE_KEY_TCL }}
          ${{ secrets.SSH_PRIVATE_KEY_YOSYS_VERIFIC }}
          ${{ secrets.SSH_PRIVATE_KEY_RTL_BENCH }}
          ${{ secrets.SSH_PRIVATE_KEY_YOSYS }}
          ${{ secrets.SSH_PRIVATE_KEY_YOSYS_PLUGINS }}
          ${{ secrets.SSH_PRIVATE_KEY_ABC }}
          ${{ secrets.SSH_PRIVATE_KEY_LOGIC_SYNTH }}
          ${{ secrets.SSH_PRIVATE_KEY_JIRA_TESTCASE }}
          ${{ secrets.SSH_PRIVATE_KEY_LITEX_RS }}
          ${{ secrets.SSH_PRIVATE_KEY_TOOLS }}
          ${{ secrets.SSH_PRIVATE_KEY_RAPTOR_TOOLS }}
          ${{ secrets.SSH_PRIVATE_KEY_IP_CATALOG }}
          ${{ secrets.SSH_PRIVATE_KEY_BACKEND }}
          ${{ secrets.SSH_PRIVATE_KEY_EMBEDDED_COMMON_DEV }}
          ${{ secrets.SSH_PRIVATE_KEY_U_BOOT_DEV }}
          ${{ secrets.SSH_PRIVATE_KEY_ZEPHYR_DEV }}
          ${{ secrets.SSH_PRIVATE_KEY_OPENFPGA_PD_CASTOR_RS }}
          ${{ secrets.SSH_RS_FPGA_PRIMITIVES }}

    - name: Checkout code
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: switch to branch
      run: |
            git branch -a 
            git pull
            BRANCH=${{needs.XML_Digest_and_raptor_build.outputs.output1}}
            set +e
            git ls-remote --exit-code --heads origin $BRANCH >/dev/null 2>&1
            EXIT_CODE=$?
            if [[ $EXIT_CODE == '0' ]]; then
                echo "Git branch '$BRANCH' exists in the remote repository"
                git checkout $BRANCH
            elif [[ $EXIT_CODE == '2' ]]; then
                echo "Git branch '$BRANCH' does not exist in the remote repository"
            fi
            git branch
                      
#    - name: Create PR on pass test
#      uses: repo-sync/pull-request@v2
#      with:
#          source_branch: ${{needs.XML_Digest_and_raptor_build.outputs.output1}}                               # branch having xmls files
#          destination_branch: "main"                                                                   # name of branch on which PR go
#          pr_title: "Pulling release 0.9.17 into main. "               # Title of pull request
#          pr_body: "An automated PR to check in New XML/CSV files from Release. Click on the link to see tests/batch results ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"                              # Full markdown support, requires pr_title
#          pr_reviewer: "alain-rs"                                                         # Comma-separated list (no spaces)
#          pr_assignee: "nadeemyaseen-rs"                                                  # Comma-separated list (no spaces)
#          pr_label: "openfpga_castor_pd_XMLs"                                             # Comma-separated list (no spaces)
#          pr_allow_empty: true                                                            # Creates pull request even if there are no changes
#          github_token: ${{ secrets.GITHUB_TOKEN }}    

  Create_Jira:
    needs: [XML_Digest_and_test,XML_Digest_and_raptor_build]
    if: ${{ always() }}
    runs-on: ubuntu-latest
  
    steps:
    - name: ssh-agent
      uses: webfactory/ssh-agent@v0.7.0
      with: 
        ssh-private-key: |
          ${{ secrets.SSH_PRIVATE_KEY_VERIFIC_RS }}
          ${{ secrets.SSH_PRIVATE_KEY_OPENFPGA }}
          ${{ secrets.SSH_PRIVATE_KEY_FOEDAG }}
          ${{ secrets.SSH_PRIVATE_KEY_TCL }}
          ${{ secrets.SSH_PRIVATE_KEY_YOSYS_VERIFIC }}
          ${{ secrets.SSH_PRIVATE_KEY_RTL_BENCH }}
          ${{ secrets.SSH_PRIVATE_KEY_YOSYS }}
          ${{ secrets.SSH_PRIVATE_KEY_YOSYS_PLUGINS }}
          ${{ secrets.SSH_PRIVATE_KEY_ABC }}
          ${{ secrets.SSH_PRIVATE_KEY_LOGIC_SYNTH }}
          ${{ secrets.SSH_PRIVATE_KEY_JIRA_TESTCASE }}
          ${{ secrets.SSH_PRIVATE_KEY_LITEX_RS }}
          ${{ secrets.SSH_PRIVATE_KEY_TOOLS }}
          ${{ secrets.SSH_PRIVATE_KEY_RAPTOR_TOOLS }}
          ${{ secrets.SSH_PRIVATE_KEY_IP_CATALOG }}
          ${{ secrets.SSH_PRIVATE_KEY_BACKEND }}
          ${{ secrets.SSH_PRIVATE_KEY_EMBEDDED_COMMON_DEV }}
          ${{ secrets.SSH_PRIVATE_KEY_U_BOOT_DEV }}
          ${{ secrets.SSH_PRIVATE_KEY_ZEPHYR_DEV }}
          ${{ secrets.SSH_PRIVATE_KEY_OPENFPGA_PD_CASTOR_RS }}
          ${{ secrets.SSH_RS_FPGA_PRIMITIVES }}

    - name: Checkout code
      uses: actions/checkout@v3
      with:
        fetch-depth: 0
  
#    - name: Create Jira on failing test
#      if: ${{ needs.XML_Digest_and_test.outputs.output3 }} == "fail"  
#      uses: tomhjp/gh-action-jira-create@v0.1.3
#      with:
#          project: EDA
#          issuetype: "Bug"
#          summary: "Smoke test fail on XML/CSV from release 0.9.17."
#          description: "In an attempt to merge the release 0.9.17 in Raptor, the smoke test fails. The link to the failed job is ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
#          extraFields: '{"assignee": { "id": "712020:63820c3b-2ac9-4f39-b263-9d19c1e5ebcd"}}'
#          #extraFields: '{"assignee": { "id": "6239bc27a95758006959b14d"}}'
#      env:
#            JIRA_BASE_URL: https://rapidsilicon.atlassian.net
#            JIRA_USER_EMAIL: nadeem.yaseen@rapidsilicon.com
#            JIRA_API_TOKEN: ${{ secrets.JIRA_API_TOKEN }}            

#    - name: automerge XMLs PR
#      uses: "pascalgn/automerge-action@v0.15.6"
#      env:
#          GITHUB_TOKEN: "${{ secrets.OPENFPGA_CASTOR_XML_MERGE }}"
#          MERGE_LABELS: "openfpga_castor_pd_XMLs"
#          MERGE_REMOVE_LABELS: "openfpga_castor_pd_XMLs"
#          MERGE_METHOD: "merge"
#          MERGE_COMMIT_MESSAGE: "Merge the XMLs version ${{ github.event.client_payload.new_tag }}"
#          MERGE_FORKS: "false"
#          MERGE_RETRIES: "2"
#          MERGE_RETRY_SLEEP: "10000"
#          MERGE_REQUIRED_APPROVALS: "0"
#          MERGE_DELETE_BRANCH: "true"
#          MERGE_ERROR_FAIL: "true"
