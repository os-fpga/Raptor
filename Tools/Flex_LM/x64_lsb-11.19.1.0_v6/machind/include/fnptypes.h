/**************************************************************************************************
* Copyright (c) 1997-2016, 2018 Flexera. All Rights Reserved.
**************************************************************************************************/
#ifndef FNP_TYPES_DEFINED
#define FNP_TYPES_DEFINED

#include "fnpstdtypes.h"

#define FNP_FALSE (0)
#define FNP_TRUE (1)

/* A boolean - see FNP_TRUE/FNP_FALSE. */
typedef unsigned char FNP_BOOL;

/* Errors generated by the API calls. */
enum FNP_ERROR_CODES_ENUM
{
    FNP_ERR_NONE									=  0, /* No error.*/
    FNP_ERR_UNEXPECTED                              =  1, /* An exception has been generated inside the API code that was
															 not expected at this time. */

	FNP_ERR_HANDLE                                  =  2, /* The handle passed was not valid handle. */
	FNP_ERR_NOT_FOUND                               =  3, /* The requested item was not found. */
	FNP_ERR_NO_MORE_ITEMS                           =  4, /* The end of a list of items has been reached. */
	FNP_ERR_UNKNOWN                                 =  5, /* Unknown information has been requested. */
	FNP_ERR_BUFF_TOO_SMALL                          =  6, /* The buffer supplied to the API call is too small to receive
															 the data been returned. */

	FNP_ERR_INVALID_PARAM                           =  7, /* A parameter passed into the API call is not in valid state. */
	FNP_ERR_ACCESS_DENIED                           =  8, /* The call has failed because the caller does not have access to
															 the requested data. */

	FNP_ERR_VERIFICATION                            =  9, /* The verification of a signature failed. */
	FNP_ERR_PARTIAL_SUCCESS                         = 10, /* The call was partially successful. See API documentation for further details. */
	FNP_ERR_COMPLETE_FAILURE                        = 11, /* The call completely failed. See API documentation for further details. */
	FNP_ERR_FILE_CORRUPT                            = 12, /* The file being accessed by the API is corrupt. */
	FNP_ERR_UNTRUSTED                               = 13, /* The operation cannot complete because the require section of trusted storage is not trusted. */
	FNP_ERR_RESPONSE_FROM_SERVER_ERROR				= 14, /* Pre 11.12.0.0 The server said 'No - I have an error'. */
	FNP_ERR_RESPONSE_FROM_SERVER_DENIED				= 15, /* Pre 11.12.0.0 The server said 'No - I deny you a response'. */
	FNP_ERR_NOT_BROKEN                              = 16, /* The caller tried to repair a non-broken tid. */
	FNP_ERR_NOT_IN_SERVER_MODE                      = 17, /* A server specific function was called when not in server mode. */
	FNP_ERR_COMMS                                   = 18, /* */
	FNP_ERR_BAD_HASH                                = 19, /* */
	FNP_ERR_UNSUPPORTED_SIGNATURE                   = 20, /* */
	FNP_ERR_PARAMETER_MISMATCH                      = 21, /* */
	FNP_ERR_NO_OUTSTANDING_REQUEST                  = 22, /* */
	FNP_ERR_REQUEST_ALREADY_OUTSTANDING             = 23, /* A request for the specified id is already outstanding and must be actioned or deleted first. */
	FNP_ERR_XML_BADLY_FORMED                        = 24, /* */
	FNP_ERR_XML_INVALID                             = 25, /* */
	FNP_ERR_XML_MISSING_MANDATORY_ELEMENT           = 26, /* */
	FNP_ERR_SERVICE_INTERFACE                       = 27, /* A service interface error occurred. */
	FNP_ERR_FULFILLMENT_RECORD_NOT_FOUND            = 28, /* A specified FR could not be found. */
	FNP_ERR_BAD_TRUSTED_CONFIG                      = 29, /* The trusted configuration being imported is invalid or badly formed. */
	FNP_ERR_INVALID_TARGET_XML                      = 30, /* */
	FNP_ERR_RECVDATA_FAILED                         = 31, /* */
	FNP_ERR_SENDDATA_FAILED                         = 32, /* */
	FNP_ERR_INVALID_REQUEST_TYPE                    = 33, /* */
	FNP_ERR_CONNECTION_FAILED                       = 34, /* */
	FNP_ERR_SSLCONTEXT_FAILED                       = 35, /* */
	FNP_ERR_INVALID_CONTEXT                         = 36, /* */
	FNP_ERR_TIMEDOUT                                = 37, /* */
	FNP_ERR_CANCELLED_BY_SERVER                     = 38, /* */
	FNP_ERR_CANCELLED_BY_CALLER                     = 39, /* */
	FNP_ERR_NO_TRUSTED_CONFIG                       = 40, /* The operation cannot complete because there is no trusted config information for the 
														     requested section or possibly not trusted section at all! */
	FNP_ERR_XML_VERSION_UNSUPPORTED                 = 41, /* Some XML was encountered with an unsupported VersionNumber */
	FNP_ERR_ANCHORING_DISABLED                      = 42, /* Operation requires anchoring to be enabled in config */
	FNP_ERR_TRIAL_EXISTS                            = 43, /* */
	FNP_ERR_WRITE_FILE                              = 44, /* */
	FNP_ERR_UNKNOWN_SHORTCODE_SCHEME_ID             = 45, /* */
	FNP_ERR_INVALID_SHORTCODE_VENDOR_ITEM_VALUE		= 46, /* */ 
	FNP_ERR_3SERVER_BUFFER_SIZE                     = 47, /* */
	FNP_ERR_3SERVER_CONFIGURED                      = 48, /* */
	FNP_ERR_3SERVER_NOT_CONFIGURED                  = 49, /* */
	FNP_ERR_3SERVER_NOT_PERMITTED                   = 50, /* */
	FNP_ERR_3SERVER_VALIDATION                      = 51, /* */
	FNP_ERR_INVALID_TRIALPACKS_ASR_ENTRY            = 52, /* Error in the values presented in the ASR for Trial Packs */
	FNP_ERR_FULFILLMENT_RECORD_EXISTS               = 53, /* Fulfillment record already exits */
	FNP_ERR_VIF_BUFFER_SIZE                         = 54, /* Virt Interface Buffer specified in call is too small */
	FNP_ERR_VIF_NOT_SUPPORTED                       = 55, /* Virt Interface API function is not supported */
	FNP_ERR_VIF_VM_NOT_PRESENT                      = 56, /* Virt Interface VM not present */
	FNP_ERR_VIF_OUT_OF_MEMORY                       = 57, /* Virt Interface Out of memory */
	FNP_ERR_VIF_INVALID_PARAM                       = 58, /* Virt Interface Invalid parameter */
	FNP_ERR_VIF_OUT_OF_RANGE                        = 59, /* Virt Interface Out of range */
	FNP_ERR_VIF_DENIED                              = 60, /* Virt Interface Denied */
	FNP_ERR_VIF_INTERNAL                            = 61, /* Virt Interface Internal */
	FNP_ERR_VIF_VERSION                             = 62, /* Virt Interface Version mis-match */
	FNP_ERR_VIF_GENERAL_ERROR                       = 63, /* Virt Interface General error */
	FNP_ERR_SERVERQUERY_EXECUTE_FAILED              = 64, /* Failed to execute the given SERVERQUERY transaction. */
	FNP_ERR_SERVERQUERY_INVALID_REQUEST_TYPE        = 65, /* Invalid SERVERQUERY request type. */
	FNP_ERR_SERVERQUERY_TS_LOAD                     = 66, /* Failed to load the trusted storage. */
	FNP_ERR_SERVERQUERY_MANDATORY_PARAM_NOT_PRESENT	= 67, /* Mandatory input parameters are not found in the request. */
	FNP_ERR_SERVERQUERY_DICT_CREATE_FAILED          = 68, /* ServerQuery dictionary creation failed. */
	FNP_ERR_SERVERQUERY_FR_XML_FAILED               = 69, /* Failed to obtain the FR xml. */
	FNP_ERR_SERVERQUERY_MEM_ALLOC_FAILED            = 70, /* Failed to allocate memory. */
	FNP_ERR_3SERVER_NOT_PRIMARY                     = 71, /* Action not allowed on 3-Server non-Primary node */
	FNP_ERR_3SERVER_NOT_CONCURRENT                  = 72, /* Non-concurrent licenses not allowed for 3-Server */
	FNP_ERR_3SERVER_TWO_NEW_NODES_NOT_ALLOWED       = 73, /* 3ServerTS - Two nodes cannot be replaced at the same time. */
	FNP_ERR_ASR_TYPE_PREP_TYPE_MISMATCH				= 74, /* Server ASR - Server-prepped app mandates server ASR type; same for clients. */
	FNP_ERR_SERVER_ASR_HAS_TRUSTED_CONFIG			= 75, /* Server ASR - Server ASR may not contain a Trusted Config. */
	FNP_ERR_TRUSTED_SECTION_DOES_NOT_EXIST			= 76, /* The Trusted Section specified in the ASR does not exist. */
	FNP_ERR_VM_STATUS_NOT_INITIALIZED				= 77, /* The Virtual Machine status could not be established */
	FNP_ERR_SERVICE_EXISTS							= 78, /* An instance of the FNPLicensingService daemon is already running */
	FNP_ERR_SERVICE_NOEXIST							= 79, /* There is not an instance of the FNPLicensingService daemon currently running */
	FNP_ERR_SERVICE_NOT_INSTALLED					= 80  /* The FNPLicensingService executable has not been installed */

#if 0
	Note to developers.
	Always add new error codes to the end in the same format, i.e. FNP_ERR_xxx = n, /* description */
	Do not delete an error code - if it is no longer used set to FNP_ERR_NO_LONGER_USED_n = n, /* Not used by 11.nn.n onwards */
	The lines are parsed from the header for documenation.
	The description comment must be preceeded by whitespace (i.e. not ,/*..*/) and can be multi-line.
	Do not put a comma on the last item - some compilers object.
#endif
};

/* Error codes - see FNP_ERROR_CODES_ENUM. */
typedef enum FNP_ERROR_CODES_ENUM FNP_ERROR_CODES;


/* Fulfillment record traits */
enum FNP_RECORD_TRAITS_ENUM
{
    FNP_TRAIT_ANCHORING			= 0,	/* Record is using anchoring techniques */
    FNP_TRAIT_BINDING			= 1 	/* Record is using binding techniques */
};

/* Traits applicable to fulfillment records in Trusted Storage - see FNP_RECORD_TRAITS_ENUM. */
typedef enum FNP_RECORD_TRAITS_ENUM FNP_RECORD_TRAITS;

/* COmms status */
enum FNP_COMMS_STATUS_CODES_ENUM {
	FNP_COMMS_STATUS_ERROR = 0,
	FNP_COMMS_STATUS_SUCCESS,					/*  1 */       
	FNP_COMMS_STATUS_NOT_SET,					/*  2 */
	FNP_COMMS_STATUS_CANCELLED_BY_CALLER,		/*  3 */
    FNP_COMMS_STATUS_CREATING_REQUEST,			/*  4 */
    FNP_COMMS_STATUS_REQUEST_CREATED,			/*  5 */
	FNP_COMMS_STATUS_CONTEXT_CREATED,			/*  6 */
	FNP_COMMS_STATUS_CONNECTED,					/*  7 */
	FNP_COMMS_STATUS_REQUEST_SENT,				/*  8 */
	FNP_COMMS_STATUS_POLLING_FOR_RESPONSE,		/*  9 */
	FNP_COMMS_STATUS_WAITING_FOR_RESPONSE,		/* 10 */
	FNP_COMMS_STATUS_DONE,						/* 11 */
};

/* Status codes - see FNP_STATUS_CODES_ENUM. */
typedef enum FNP_COMMS_STATUS_CODES_ENUM FNP_COMMS_STATUS_CODES;

/* Comms status returns */
enum FNP_COMMS_CALLBACK_RETURN_CODES_ENUM {
	FNP_COMMS_CALLBACK_RETURN_CONTINUE = 0,
	FNP_COMMS_CALLBACK_RETURN_CANCEL_REQUEST
};

/* Status returns - see FNP_COMMS_CALLBACK_RETURN_CODES_ENUM. */
typedef enum FNP_COMMS_CALLBACK_RETURN_CODES_ENUM FNP_COMMS_CALLBACK_RETURN_CODES;

/* Handles to objects returned by the API. */
typedef uint32_t FNP_HAMCONTEXT;
typedef uint32_t FNP_HSTORAGE;
typedef uint32_t FNP_HRECORD;
typedef uint32_t FNP_HDICTIONARY;
typedef uint32_t FNP_HASRMAN;
typedef uint32_t FNP_HASR;
typedef uint32_t FNP_HASCONTEXT;
typedef uint32_t FNP_HTRANSACTION;
typedef uint32_t FNP_HTRANSACTIONREQ;
typedef uint32_t FNP_HTRANSACTIONRSP;
typedef uint32_t FNP_HTRANSACTIONREQACT;
typedef uint32_t FNP_HTRANSACTIONRSPACT;
typedef uint32_t FNP_HTRANSDICTIONARY;
typedef void * FNP_HVIFSESSION;
typedef uint32_t FNP_HSERVERQUERYDATA;

/* This is just a temporary structure mirroring FlxActError until the */
/* HLAPI gets moved inside jumpgate and exceptions get sorted out */
typedef struct {
	uint32_t    majorErrorNo;   /* major error code, get information from error types.h */
	uint32_t    minorErrorNo;   /* corresponds to code location - source of error */
	uint32_t    sysErrorNo;     /* corresponds to system to 3rd party library error code */
} FNP_TRANSACTION_ERROR;

/* Trusted state bitfield values */
#define	FNP_RECORD_TRUST_RESTORE	0x1		/* The restore trust (1 = trusted, 0 = untrusted) */
#define	FNP_RECORD_TRUST_HOST		0x2		/* The host trust (1 = trusted, 0 = untrusted) */
#define FNP_RECORD_TRUST_TIME		0x4		/* The time trust (1 = trusted, 0 = untrusted) */
#define FNP_RECORD_FULLY_TRUSTED	(FNP_RECORD_TRUST_RESTORE | FNP_RECORD_TRUST_HOST | FNP_RECORD_TRUST_TIME)

typedef uint32_t(*FNP_STATUS_CALLBACK)(const void* pUserData, uint32_t statusOld, uint32_t statusNew);

/* Type of Unique Machine Identifier to return */
enum FNP_UMN_TYPE_ENUM
{
	FNP_UMN_TYPE1 = 0,
	FNP_UMN_TYPE2,
	FNP_UMN_TYPE3,
	FNP_UMN_TYPE4,
	FNP_UMN_TYPE5
};

typedef enum FNP_UMN_TYPE_ENUM FNP_UMN_TYPE;

#endif
