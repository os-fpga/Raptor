{
  "parameters" : {
    "I_BUF.WEAK_KEEPER" : {
      "rules" : {
        "WEAK_KEEPER" : "__arg0__"
      },
      "results" : {
        "I_BUF" : "WEAK_KEEPER==__arg0__"
      },
      "neg_results" : {
        "I_BUF" : "WEAK_KEEPER==DEFAULT"
      }
    },
    "I_BUF_DS.DIFFERENTIAL_TERMINATION" : {
      "rules" : {
        "DIFFERENTIAL_TERMINATION" : ["FALSE", "OFF", "0"]
      },
      "results" : {
        "DFODTEN" : "DF_odt_disable"
      },
      "neg_results" : {
        "DFODTEN" : "DF_odt_enable"
      }
    },
    "I_DELAY" : {
      "rules" : {
        "DELAY" : "__arg0__"
      },
      "results" : {
        "RX_DLY" : "__arg0__"
      }
    },
    "O_DELAY" : {
      "rules" : {
        "DELAY" : "__arg0__"
      },
      "results" : {
        "TX_DLY" : "__arg0__"
      }
    },
    "I_DDR" : {
      "rules" : {
      },
      "results" : {
        "I_DDR" : "MODE==DDR"
      }
    },
    "O_DDR" : {
      "rules" : {
      },
      "results" : {
        "O_DDR" : "MODE==DDR"
      }
    },
    "I_SERDES.BYPASS" : {
      "rules" : {
        "WIDTH" : "__arg0__"
      },
      "results" : {
        "__define__" : "parse_serdes_width",
        "RATE" : "__arg0__",
        "PEER_IS_ON" : "__peer_is_on__",
        "RX_BYPASS" : "RX_gear_on"
      },
      "neg_results" : {
        "RX_BYPASS" : "RX_gear_on"
      }
    },
    "I_SERDES.DDR_MODE" : {
      "rules" : {
        "DATA_RATE" : "__arg0__"
      },
      "results" : {
        "I_SERDES" : "DDR_MODE==__arg0__"
      },
      "neg_results" : {
        "I_SERDES" : "DDR_MODE==SDR"
      }
    },
    "I_SERDES.DPA_MODE" : {
      "rules" : {
        "DPA_MODE" : "__arg0__"
      },
      "results" : {
        "I_SERDES" : "DPA_MODE==__arg0__"
      },
      "neg_results" : {
        "I_SERDES" : "DPA_MODE==NONE"
      }
    },
    "I_SERDES.ROOT_BANK_CLKMUX" : {
      "rules" : {
        "ROUTE_TO_FABRIC_CLK" : "__arg0__",
        "DPA_MODE" : "__arg1__"
      },
      "results" : {
        "__location__" : "__ROOT_BANK_MUX_LOCATION__",
        "I_SERDES" : "ROOT_BANK_SRC==__AB__&DPA_MODE==__arg1__ --#MUX=__ROOT_BANK_MUX__"
      }
    },
    "I_SERDES.ROOT_MUX" : {
      "rules" : {
        "ROUTE_TO_FABRIC_CLK" : "__arg0__"
      },
      "results" : {
        "__location__" : "u_GBOX_HP_40X2.u_gbox_clkmux_52x1_left___arg0__",
        "ROOT_MUX_SEL" : "__ROOT_MUX__"
      }
    },
    "O_SERDES.BYPASS" : {
      "rules" : {
        "WIDTH" : "__arg0__"
      },
      "results" : {
        "__define__" : "parse_serdes_width",
        "RATE" : "__arg0__",
        "PEER_IS_ON" : "__peer_is_on__",
        "TX_BYPASS" : "TX_gear_on"
      },
      "neg_results" : {
        "TX_BYPASS" : "TX_gear_on"
      }
    },
    "O_SERDES.DDR_MODE" : {
      "rules" : {
        "DATA_RATE" : "__arg0__"
      },
      "results" : {
        "O_SERDES" : "DDR_MODE==__arg0__"
      },
      "neg_results" : {
        "O_SERDES" : "DDR_MODE==SDR"
      }
    },
    "O_SERDES_CLK.IO" : {
      "rules" : {
      },
      "results" : {
        "TX_CLOCK_IO" : "TX_clock_IO"
      }
    },
    "O_SERDES_CLK.CLK_PHASE" : {
      "rules" : {
        "CLOCK_PHASE" : "__argCLOCK_PHASE__"
      },
      "results" : {
        "__define__" : "parse_o_serdes_clk_phase_parameter",
        "TX_CLK_PHASE" : "__clock_phase__"
      }
    },
    "O_SERDES_CLK.DDR_MODE" : {
      "rules" : {
        "DATA_RATE" : "__arg0__"
      },
      "results" : {
        "O_SERDES_CLK" : "DDR_MODE==__arg0__"
      },
      "neg_results" : {
        "O_SERDES_CLK" : "DDR_MODE==SDR"
      }
    },
    "BOOT_CLOCK" : {
      "rules" : {
        "ROUTE_TO_FABRIC_CLK" : "__arg0__"
      },
      "results" : [
        {
          "__location__" : "u_GBOX_HP_40X2.u_gbox_clkmux_52x1_left___arg0__",
          "ROOT_MUX_SEL" : "48"
        }
      ]
    },
    "PLL.PLLREF_MUX" : {
      "rules" : {
      },
      "results" : {
        "__location__" : "u_GBOX_HP_40X2.u_gbox_pll_refmux___pll_resource__",
        "PLL" : "PLLREF_SRC==__SRC__ --#PIN=__PIN__ --#BANK=__BANK__ --#DIV=__DIV__"
      }
    },
    "PLL.PLL" : {
      "rules" : {
        "PLL_DIV" : "__argDIV__",
        "PLL_MULT" : "__argMULT__",
        "PLL_POST_DIV" : "__argPOST_DIV__"
      },
      "results" : {
        "__define__" : "parse_pll_parameter",
        "__location__" : "u_GBOX_HP_40X2.u_gbox_PLLTS16FFCFRACF___pll_resource__",
        "PLL" : "PLL_SRC==DEFAULT",
        "pll_REFDIV" : "__refdiv__",
        "pll_FBDIV" : "__fbdiv__",
        "pll_POSTDIV1" : "__postdiv1__",
        "pll_POSTDIV2" : "__postdiv2__",
        "pll_PLLEN" : "__pll_enable__"
      }
    },
    "PLL.ROOT_MUX0" : {
      "rules" : {
        "__connectivity__" : "CLK_OUT",
        "__index__" : "__argIndex{default:0}__",
        "OUT0_ROUTE_TO_FABRIC_CLK" : "__arg0__"
      },
      "results" : {
        "__define__" : "parse_pll_root_mux",
        "__location__" : "u_GBOX_HP_40X2.u_gbox_clkmux_52x1_left___arg0__",
        "ROOT_MUX_SEL" : "__pll_root_mux_sel__"
      }
    },
    "PLL.ROOT_MUX1" : {
      "rules" : {
        "__connectivity__" : "CLK_OUT_DIV2",
        "__index__" : "__argIndex{default:1}__",
        "OUT1_ROUTE_TO_FABRIC_CLK" : "__arg0__"
      },
      "results" : {
        "__define__" : "parse_pll_root_mux",
        "__location__" : "u_GBOX_HP_40X2.u_gbox_clkmux_52x1_left___arg0__",
        "ROOT_MUX_SEL" : "__pll_root_mux_sel__"
      }
    },
    "PLL.ROOT_MUX2" : {
      "rules" : {
        "__connectivity__" : "CLK_OUT_DIV3",
        "__index__" : "__argIndex{default:2}__",
        "OUT2_ROUTE_TO_FABRIC_CLK" : "__arg0__"
      },
      "results" : {
        "__define__" : "parse_pll_root_mux",
        "__location__" : "u_GBOX_HP_40X2.u_gbox_clkmux_52x1_left___arg0__",
        "ROOT_MUX_SEL" : "__pll_root_mux_sel__"
      }
    },
    "PLL.ROOT_MUX3" : {
      "rules" : {
        "__connectivity__" : "CLK_OUT_DIV4",
        "__index__" : "__argIndex{default:3}__",
        "OUT3_ROUTE_TO_FABRIC_CLK" : "__arg0__"
      },
      "results" : {
        "__define__" : "parse_pll_root_mux",
        "__location__" : "u_GBOX_HP_40X2.u_gbox_clkmux_52x1_left___arg0__",
        "ROOT_MUX_SEL" : "__pll_root_mux_sel__"
      }
    },
    "FCLK_BUF" : {
      "rules" : {
        "ROUTE_TO_FABRIC_CLK" : "__arg0__",
        "ROUTE_FROM_FABRIC_CLK" : "__arg1__"
      },
      "results" : {
        "__define__" : "parse_fabric_clock_buffer_root_mux",
        "__location__" : "u_GBOX_HP_40X2.u_gbox_clkmux_52x1_left___arg0__",
        "ROOT_MUX_SEL" : "__fclk_buf_root_mux_sel__"
      }
    }
  },
  "properties" : {
    "I_BUF.IOSTANDARD" : {
      "rules" : {
        "IOSTANDARD" : "__arg0__"
      },
      "results" : {
        "I_BUF" : "IOSTANDARD==__arg0__"
      },
      "neg_results" : {
        "I_BUF" : "IOSTANDARD==DEFAULT"
      }
    },
    "I_BUF_DS.IOSTANDARD" : {
      "rules" : {
        "IOSTANDARD" : "__arg0__"
      },
      "results" : {
        "I_BUF_DS" : "IOSTANDARD==__arg0__"
      },
      "neg_results" : {
        "I_BUF_DS" : "IOSTANDARD==DEFAULT"
      }
    },
    "O_BUF.IOSTANDARD" : {
      "rules" : {
        "IOSTANDARD" : "__arg0__"
      },
      "results" : {
        "O_BUF" : "IOSTANDARD==__arg0__"
      },
      "neg_results" : {
        "O_BUF" : "IOSTANDARD==DEFAULT"
      }
    },
    "O_BUF_DS.IOSTANDARD" : {
      "rules" : {
        "IOSTANDARD" : "__arg0__"
      },
      "results" : {
        "O_BUF_DS" : "IOSTANDARD==__arg0__"
      },
      "neg_results" : {
        "O_BUF_DS" : "IOSTANDARD==DEFAULT"
      }
    },
    "O_BUFT.IOSTANDARD" : {
      "rules" : {
        "IOSTANDARD" : "__arg0__"
      },
      "results" : {
        "O_BUFT" : "IOSTANDARD==__arg0__"
      },
      "neg_results" : {
        "O_BUFT" : "IOSTANDARD==DEFAULT"
      }
    },
    "O_BUFT_DS.IOSTANDARD" : {
      "rules" : {
        "IOSTANDARD" : "__arg0__"
      },
      "results" : {
        "O_BUFT_DS" : "IOSTANDARD==__arg0__"
      },
      "neg_results" : {
        "O_BUFT_DS" : "IOSTANDARD==DEFAULT"
      }
    },
    "CLK_BUF.GBOX_TOP" : {
      "rules" : {
      },
      "results" : {
        "CLK_BUF" : "GBOX_TOP_SRC==DEFAULT"
      }
    },
    "CLK_BUF.ROOT_BANK_CLKMUX" : {
      "rules" : {
        "ROUTE_TO_FABRIC_CLK" : "__arg0__"
      },
      "results" : {
        "__location__" : "__ROOT_BANK_MUX_LOCATION__",
        "CLK_BUF" : "ROOT_BANK_SRC==__AB__ --#MUX=__ROOT_BANK_MUX__"
      }
    },
    "CLK_BUF.ROOT_MUX" : {
      "rules" : {
        "ROUTE_TO_FABRIC_CLK" : "__arg0__"
      },
      "results" : {
        "__location__" : "u_GBOX_HP_40X2.u_gbox_clkmux_52x1_left___arg0__",
        "ROOT_MUX_SEL" : "__ROOT_MUX__"
      }
    }
  },
  "__file__" : [
    "import re",
    "def get_pin_info(name) :",
    "  bank = 0",
    "  is_clock = False",
    "  index = 0",
    "  pair_index = 0",
    "  ab_io = 0",
    "  ab_name = ''",
    "  root_bank_mux_location = ''",
    "  root_bank_mux_resource = ''",
    "  root_bank_mux_core_input_index = 0",
    "  root_mux_input_index = 0",
    "  if name.find('BOOT_CLOCK#') == 0:",
    "    type = 'BOOT_CLOCK'",
    "    index = int(name[11:])",
    "  else :",
    "    m = re.search(r'H(P|R?)_(\\d?)(|_CC?)_(\\d+?)_(\\d\\d?)(P|N?)', name)",
    "    assert m != None",
    "    assert len(m.groups()) == 6",
    "    type = 'HP' if m.group(1) == 'P' else ('HVL' if m.group(2) in ['1', '2'] else 'HVR')",
    "    bank = 0 if m.group(2) in ['1', '3'] else 1",
    "    is_clock = m.group(2) == '_CC'",
    "    index = int(m.group(4))",
    "    pair_index = int(m.group(5))",
    "    ab_io = 0 if (pair_index < 10) else 1",
    "    ab_name = '%c' % (ord('A') + ab_io)",
    "    root_name = 'u_GBOX_HP_40X2' if type == 'HP' else ('u_GBOX_HV_40X2_VL' if type == 'HVL' else 'u_GBOX_HV_40X2_VR')",
    "    root_bank_mux_location = '%s.u_gbox_root_bank_clkmux_%d' % (root_name, bank)",
    "    root_bank_mux_resource = '%s (Bank %s)' % (root_bank_mux_location, ab_name)",
    "    root_bank_mux_core_input_index = index - (20 * ab_io)",
    "    root_mux_input_index = 0 if type == 'HP' else (8 if type == 'HVL' else 16)",
    "    root_mux_input_index += ((2 * bank) + ab_io)",
    "  return [type, bank, is_clock, index, pair_index, ab_io, ab_name, root_bank_mux_location, root_bank_mux_resource, root_bank_mux_core_input_index, root_mux_input_index]",
    "def fclk_use_pll_resource(fclk) :",
    "  pll_resource = 0", 
    "  if fclk.find('hvl_fclk_') == 0 :",
    "    pll_resource = 0",
    "  elif fclk.find('hvr_fclk_') == 0 :",
    "    pll_resource = 1",
    "  elif fclk.find('hp_fclk_0') == 0 :",
    "    pll_resource = 0",
    "  elif fclk.find('hp_fclk_1') == 0 :",
    "    pll_resource = 1",
    "  else :",
    "    raise Exception('Unknown FCLK %s' % fclk)",
    "  return [pll_resource]"
  ],
  "__resources__" : {
    "pll" : [
      { "name" : "pll_0", "ric_name" : "u_GBOX_HP_40X2.u_gbox_PLLTS16FFCFRACF_0", "type" : "HP", "subtype" : "hp", "bank" : 0 },
      { "name" : "pll_1", "ric_name" : "u_GBOX_HP_40X2.u_gbox_PLLTS16FFCFRACF_1", "type" : "HP", "subtype" : "hp", "bank" : 1 }
    ],
    "fclk" : [
      { "name" : "hp_fclk_0_A",  "ric_name" : "u_GBOX_HP_40X2.u_gbox_fclk_mux_all",    "type" : "HP", "subtype" : "hp",  "bank" : 0 },
      { "name" : "hp_fclk_0_B",  "ric_name" : "u_GBOX_HP_40X2.u_gbox_fclk_mux_all",    "type" : "HP", "subtype" : "hp",  "bank" : 0 },
      { "name" : "hp_fclk_1_A",  "ric_name" : "u_GBOX_HP_40X2.u_gbox_fclk_mux_all",    "type" : "HP", "subtype" : "hp",  "bank" : 1 },
      { "name" : "hp_fclk_1_B",  "ric_name" : "u_GBOX_HP_40X2.u_gbox_fclk_mux_all",    "type" : "HP", "subtype" : "hp",  "bank" : 1 },
      { "name" : "hvl_fclk_0_A", "ric_name" : "u_GBOX_HV_40X2_VL.u_gbox_fclk_mux_all", "type" : "HV", "subtype" : "hvl", "bank" : 0 },
      { "name" : "hvl_fclk_0_B", "ric_name" : "u_GBOX_HV_40X2_VL.u_gbox_fclk_mux_all", "type" : "HV", "subtype" : "hvl", "bank" : 0 },
      { "name" : "hvl_fclk_1_A", "ric_name" : "u_GBOX_HV_40X2_VL.u_gbox_fclk_mux_all", "type" : "HV", "subtype" : "hvl", "bank" : 1 },
      { "name" : "hvl_fclk_1_B", "ric_name" : "u_GBOX_HV_40X2_VL.u_gbox_fclk_mux_all", "type" : "HV", "subtype" : "hvl", "bank" : 1 },
      { "name" : "hvr_fclk_0_A", "ric_name" : "u_GBOX_HV_40X2_VR.u_gbox_fclk_mux_all", "type" : "HV", "subtype" : "hvr", "bank" : 0 },
      { "name" : "hvr_fclk_0_B", "ric_name" : "u_GBOX_HV_40X2_VR.u_gbox_fclk_mux_all", "type" : "HV", "subtype" : "hvr", "bank" : 0 },
      { "name" : "hvr_fclk_1_A", "ric_name" : "u_GBOX_HV_40X2_VR.u_gbox_fclk_mux_all", "type" : "HV", "subtype" : "hvr", "bank" : 1 },
      { "name" : "hvr_fclk_1_B", "ric_name" : "u_GBOX_HV_40X2_VR.u_gbox_fclk_mux_all", "type" : "HV", "subtype" : "hvr", "bank" : 1 }
    ]
  },
  "__init__" : {
    "__args__" : [],
    "__equation__" : [
      "import json",
      "G_RESOURCES = json.loads('__resources_string__')",
      "assert 'pll' in G_RESOURCES",
      "assert 'fclk' in G_RESOURCES",
      "MAX_BOOT_CLOCK_RESOURCE = 1",
      "MAX_FABRIC_CLOCK_RESOURCE = 16",
      "MAX_PLL_RESOURCE = len(G_RESOURCES['pll'])",
      "hp_banks = ['HP_%d' % i for i in [1, 2]]",
      "hr_banks = ['HR_%d' % i for i in [1, 2, 3, 5]]",
      "all_banks = hp_banks + hr_banks",
      "pin_list = ['%d_%d%c' % (i, i//2, 'N' if i%2 else 'P') for i in range(40)]",
      "cc_pin_list = ['%d_%d%c' % (i, i//2, 'N' if i%2 else 'P') for i in [18, 19, 38, 39]]",
      "cc_p_pin_list = [pin for pin in cc_pin_list if pin[-1] == 'P']",
      "g_all_pins = ['%s_%s%s' % (i, 'CC_' if j in cc_pin_list else '', j) for i in all_banks for j in pin_list]",
      "g_all_clock_pins = ['%s_CC_%s' % (i, j) for i in all_banks for j in cc_p_pin_list]",
      "g_all_pll_clock_pins = [pin for pin in g_all_clock_pins]",
      "g_boot_clock_resources = 0",
      "g_pin_resources = {}",
      "g_fabric_clock_resources = 0",
      "g_pll_resources = []",
      "g_gearbox_width = {}"
    ]
  },
  "__primary_validation__" : {
    "__seqeunce__" : [
      "__pin_is_valid__",
      "__check_pin_resource__",
      "__ds_pin_is_valid__",
      "__pin_is_differential__",
      "__check_ds_pin_resource__",
      "__clock_pin_is_valid__",
      "__check_boot_clock_resource__",
      "__pll_clock_pin_is_valid__"
    ],
    "__pin_is_valid__" : {
      "__module__" : ["I_BUF", "O_BUF", "O_BUFT"],
      "__equation__" : [
        "pin_result = '__location0__' in g_all_pins"
      ]
    },
    "__check_pin_resource__" : {
      "__module__" : ["I_BUF", "O_BUF", "O_BUFT"],
      "__equation__" : [
        "temp = '__primitive_flags__'.split(',')",
        "bidir = 'INOUT' in temp",
        "value = 1 if 'I_BUF' in temp else 2",
        "pin_result = '__location0__' not in g_pin_resources or ((g_pin_resources['__location0__'] & value) == 0)",
        "exist = 0 if '__location0__' not in g_pin_resources else g_pin_resources['__location0__']",
        "g_pin_resources['__location0__' if pin_result else ''] = exist | (value if bidir else 3)",
        "g_pin_resources.pop('', None)"
      ]
    },
    "__ds_pin_is_valid__" : {
      "__module__" : ["I_BUF_DS", "O_BUF_DS", "O_BUFT_DS"],
      "__equation__" : [
        "pin_result = '__location0__' in g_all_pins",
        "pin_result = pin_result and '__location1__' in g_all_pins"
      ]
    },
    "__pin_is_differential__" : {
      "__module__" : ["I_BUF_DS", "O_BUF_DS", "O_BUFT_DS"],
      "__equation__" : [
        "import re",
        "pin_result = '__location0__' in g_all_pins",
        "pin_result = pin_result and '__location1__' in g_all_pins",
        "m0 = re.search(r'H(P|R?)_(\\d?)(|_CC?)_(\\d+?)_(\\d\\d?)(P|N?)', '__location0__')",
        "m1 = re.search(r'H(P|R?)_(\\d?)(|_CC?)_(\\d+?)_(\\d\\d?)(P|N?)', '__location1__')",
        "pin_result = pin_result and m0 != None",
        "pin_result = pin_result and m1 != None",
        "pin_result = pin_result and len(m0.groups()) == 6",
        "pin_result = pin_result and len(m1.groups()) == 6",
        "pin_result = pin_result and m0.group(1) == m1.group(1)",
        "pin_result = pin_result and m0.group(2) == m1.group(2)",
        "pin_result = pin_result and m0.group(3) == m1.group(3)",
        "pin_result = pin_result and m0.group(4) != m1.group(4)",
        "pin_result = pin_result and m0.group(5) == m1.group(5)",
        "pin_result = pin_result and m0.group(6) != m1.group(6)"
      ]
    },
    "__check_ds_pin_resource__" : {
      "__module__" : ["I_BUF_DS", "O_BUF_DS", "O_BUFT_DS"],
      "__equation__" : [
        "pin_result = '__location0__' not in g_pin_resources",
        "pin_result = pin_result and '__location1__' not in g_pin_resources",
        "g_pin_resources['__location0__' if pin_result else ''] = 3",
        "g_pin_resources.pop('', None)",
        "g_pin_resources['__location1__' if pin_result else ''] = 3",
        "g_pin_resources.pop('', None)"
      ]
    },
    "__clock_pin_is_valid__" : {
      "__module__" : ["CLK_BUF"],
      "__equation__" : [
        "temp = '__primitive_flags__'.split(',')",
        "pin_result = '__location0__' in g_all_clock_pins or 'PIN_CLOCK_CORE_ONLY' in temp"
      ]
    },
    "__check_boot_clock_resource__" : {
      "__module__" : ["BOOT_CLOCK"],
      "__equation__" : [
        "pin_result = g_boot_clock_resources < MAX_BOOT_CLOCK_RESOURCE",
        "g_boot_clock_resources += (1 if pin_result else 0)"
      ]
    },
    "__pll_clock_pin_is_valid__" : {
      "__module__" : ["PLL"],
      "pre_primitive" : "CLK_BUF",
      "__equation__" : [
        "pin_result = '__location0__' in g_all_pll_clock_pins"
      ]
    }
  },
  "__secondary_validation__" : {
    "__seqeunce__" : [
      "__check_fabric_clock_resource__",
      "__check_data_width_parameter__",
      "__check_data_rate_parameter__",
      "__check_dpa_mode_parameter__",
      "__check_clock_phase_parameter__",
      "__check_pll_parameter__",
      "__update_fabric_clock_resource__"
    ],
    "__check_fabric_clock_resource__" : {
      "__module__" : ["CLK_BUF", "PLL"],
      "__connectivity__" : ["O", "CLK_OUT", "CLK_OUT_DIV2", "CLK_OUT_DIV3", "CLK_OUT_DIV4"],
      "__equation__" : [
        "pin_result = (__connectivity_count__ + g_fabric_clock_resources) <= MAX_FABRIC_CLOCK_RESOURCE"
      ]
    },
    "__check_data_width_parameter__" : {
      "__module__" : ["I_SERDES", "O_SERDES"],
      "__parameter__" : ["WIDTH"],
      "__equation__" : [
        "import re",
        "assert '__location__' in g_all_pins",
        "m = re.search(r'H(P|R?)_(\\d?)(|_CC?)_(\\d+?)_(\\d\\d?)(P|N?)', '__location__')",
        "assert m != None",
        "pn = 'P' if m.group(6) == 'N' else 'N'",
        "index = int(m.group(4)) & ~1",
        "index += (1 if pn == 'N' else 0)",
        "peer_location = 'H%s_%s%s_%d_%s%s' % (m.group(1), m.group(2), m.group(3), index, m.group(5), pn)",
        "width = int('WIDTH')",
        "pin_result = width >= 3 and width <= (10 if m.group(6) == 'P' else 5)",
        "pin_result = pin_result and ((peer_location not in g_gearbox_width) or (g_gearbox_width[peer_location] <= 5 and width <=5))",
        "g_gearbox_width['__location__' if pin_result else ''] = width",
        "g_gearbox_width.pop('', None)"
      ]
    },
    "__check_data_rate_parameter__" : {
      "__module__" : ["I_SERDES", "O_SERDES", "O_SERDES_CLK"],
      "__parameter__" : ["DATA_RATE"],
      "__equation__" : [
        "pin_result = 'DATA_RATE' in ['SDR', 'DDR']"
      ]
    },
    "__check_dpa_mode_parameter__" : {
      "__module__" : ["I_SERDES"],
      "__parameter__" : ["DPA_MODE"],
      "__equation__" : [
        "pin_result = 'DPA_MODE' in ['NONE', 'DPA', 'CDR']"
      ]
    },
    "__check_clock_phase_parameter__" : {
      "__module__" : ["O_SERDES_CLK"],
      "__parameter__" : ["CLOCK_PHASE"],
      "__equation__" : [
        "pin_result = 'CLOCK_PHASE' in ['0', '90', '180', '270']"
      ]
    },
    "__check_pll_parameter__" : {
      "__module__" : ["PLL"],
      "__parameter__" : ["PLL_DIV", "PLL_MULT", "PLL_POST_DIV"],
      "__equation__" : [
        "div = int('PLL_DIV', 0)",
        "mult = int('PLL_MULT', 0)",
        "post_div = int('PLL_POST_DIV', 0)",
        "post_div1 = post_div >> 4",
        "post_div2 = post_div & 0xF",
        "pin_result = (div >= 1 and div <= 63)",
        "pin_result = pin_result and (mult >= 16 and mult <= 640)",
        "pin_result = pin_result and (post_div1 >= 1 and post_div1 <= 7)",
        "pin_result = pin_result and (post_div2 >= 1 and post_div2 <= 7)",
        "pin_result = pin_result and (post_div1 >= post_div2)"
      ]
    },
    "__check_pll_clock_pin_resource__" : {
      "__module__" : ["PLL"],
      "__equation__" : [
        "pin_result = '__location0__' not in g_pll_resources",
        "pin_result = pin_result and len(g_pll_resources) < MAX_PLL_RESOURCE",
        "g_pll_resources.append('__location0__' if pin_result else '')",
        "g_pll_resources = [pin for pin in g_pll_resources if pin != '']" 
      ]
    },
    "__update_fabric_clock_resource__" : {
      "__module__" : ["CLK_BUF", "PLL"],
      "__connectivity__" : ["O", "CLK_OUT", "CLK_OUT_DIV2", "CLK_OUT_DIV3", "CLK_OUT_DIV4"],
      "__equation__" : [
        "assert ((__connectivity_count__ + g_fabric_clock_resources) <= MAX_FABRIC_CLOCK_RESOURCE)",
        "g_fabric_clock_resources += __connectivity_count__"
      ]
    }
  },
  "__define__" : {
    "parse_location" : {
      "__args__" : ["__type__", "__bank__"],
      "__equation__" : [
        "import re",
        "assert '__location__' in g_all_pins",
        "m = re.search(r'H(P|R?)_(\\d?)(|_CC?)_(\\d+?)_(\\d\\d?)(P|N?)', '__location__')",
        "__type__ = 'HP' if m.group(1) == 'P' else 'HV'",
        "__bank__ = '0' if m.group(2) in ['1', '3'] else '1'"
      ]
    },
    "parse_o_serdes_clk_phase_parameter" : {
      "__args__" : ["__clock_phase__"],
      "__equation__" : [
        "__clock_phase__ = 'TX_phase_%d' % __argCLOCK_PHASE__"
      ]
    },
    "parse_pll_parameter" : {
      "__args__" : ["__refdiv__", "__fbdiv__", "__postdiv1__", "__postdiv2__"],
      "__equation__" : [
        "__refdiv__ = str(int('__argDIV__', 0))",
        "__fbdiv__ = str(int('__argMULT__', 0))",
        "__postdiv1__ = str((int('__argPOST_DIV__', 0) >> 4) & 0x7)",
        "__postdiv2__ = str((int('__argPOST_DIV__', 0)) & 0x7)"
      ]
    },
    "parse_pll_root_mux" : {
      "__args__" : ["__pll_root_mux_sel__"],
      "__equation__" : [
        "__pll_root_mux_sel__ = 32 + (int('__pll_resource__') * 4) + __argIndex__",
        "__pll_root_mux_sel__ = '%d' % __pll_root_mux_sel__"
      ] 
    },
    "parse_fabric_clock_buffer_root_mux" : {
      "__args__" : ["__fclk_buf_root_mux_sel__"],
      "__equation__" : [
        "fabric_clock_buffer_slot = int('__arg1__')",
        "__fclk_buf_root_mux_sel__ = (40 + fabric_clock_buffer_slot - 4) if (fabric_clock_buffer_slot >= 4) else (44 + fabric_clock_buffer_slot)",
        "__fclk_buf_root_mux_sel__ = '%d' % __fclk_buf_root_mux_sel__"
      ]
    },
    "parse_serdes_width" : {
      "__args__" : ["__peer_is_on__"],
      "__equation__" : [
        "width = int('__arg0__')",
        "__peer_is_on__ = 'PEER_on' if width <= 5 else 'PEER_off'"
      ]
    }
  }
}