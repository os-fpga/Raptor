{
  "parameters" : {
    "I_BUF.WEAK_KEEPER" : {
      "rules" : {
        "WEAK_KEEPER" : "__arg0__"
      },
      "results" : {
        "I_BUF" : "WEAK_KEEPER==__arg0__"
      },
      "neg_results" : {
        "I_BUF" : "WEAK_KEEPER==DEFAULT"
      }
    },
    "I_BUF_DS.DIFFERENTIAL_TERMINATION" : {
      "rules" : {
        "DIFFERENTIAL_TERMINATION" : ["FALSE", "OFF", "0"]
      },
      "results" : {
        "DFODTEN" : "DF_odt_disable"
      },
      "neg_results" : {
        "DFODTEN" : "DF_odt_enable"
      }
    },
    "I_DELAY" : {
      "rules" : {
        "DELAY" : "__arg0__"
      },
      "results" : {
        "RX_DLY" : "__arg0__"
      }
    },
    "O_DELAY" : {
      "rules" : {
        "DELAY" : "__arg0__"
      },
      "results" : {
        "TX_DLY" : "__arg0__"
      }
    },
    "I_DDR" : {
      "rules" : {
      },
      "results" : {
        "I_DDR" : "MODE==DDR"
      }
    },
    "O_DDR" : {
      "rules" : {
      },
      "results" : {
        "O_DDR" : "MODE==DDR"
      }
    },
    "I_SERDES.BYPASS" : {
      "rules" : {
        "WIDTH" : "__arg0__"
      },
      "results" : {
        "__define__" : "parse_serdes_width",
        "RATE" : "__arg0__",
        "PEER_IS_ON" : "__peer_is_on__",
        "RX_BYPASS" : "RX_gear_on"
      },
      "neg_results" : {
        "RX_BYPASS" : "RX_gear_on"
      }
    },
    "I_SERDES.DDR_MODE" : {
      "rules" : {
        "DATA_RATE" : "__arg0__"
      },
      "results" : {
        "I_SERDES" : "DDR_MODE==__arg0__"
      },
      "neg_results" : {
        "I_SERDES" : "DDR_MODE==SDR"
      }
    },
    "I_SERDES.DPA_MODE" : {
      "rules" : {
        "DPA_MODE" : "__arg0__"
      },
      "results" : {
        "I_SERDES" : "DPA_MODE==__arg0__"
      },
      "neg_results" : {
        "I_SERDES" : "DPA_MODE==NONE"
      }
    },
    "O_SERDES.BYPASS" : {
      "rules" : {
        "WIDTH" : "__arg0__"
      },
      "results" : {
        "__define__" : "parse_serdes_width",
        "RATE" : "__arg0__",
        "PEER_IS_ON" : "__peer_is_on__",
        "TX_BYPASS" : "TX_gear_on"
      },
      "neg_results" : {
        "TX_BYPASS" : "TX_gear_on"
      }
    },
    "O_SERDES.DDR_MODE" : {
      "rules" : {
        "DATA_RATE" : "__arg0__"
      },
      "results" : {
        "O_SERDES" : "DDR_MODE==__arg0__"
      },
      "neg_results" : {
        "O_SERDES" : "DDR_MODE==SDR"
      }
    },
    "O_SERDES_CLK.CLK_PHASE" : {
      "rules" : {
        "CLOCK_PHASE" : "__argCLOCK_PHASE__"
      },
      "results" : {
        "__define__" : "parse_o_serdes_clk_phase_parameter",
        "TX_CLK_PHASE" : "__clock_phase__"
      }
    },
    "O_SERDES_CLK.DDR_MODE" : {
      "rules" : {
        "DATA_RATE" : "__arg0__"
      },
      "results" : {
        "O_SERDES_CLK" : "DDR_MODE==__arg0__"
      },
      "neg_results" : {
        "O_SERDES_CLK" : "DDR_MODE==SDR"
      }
    }
  },
  "properties" : {
    "I_BUF.IOSTANDARD" : {
      "rules" : {
        "IOSTANDARD" : "__arg0__"
      },
      "results" : {
        "I_BUF" : "IOSTANDARD==__arg0__"
      },
      "neg_results" : {
        "I_BUF" : "IOSTANDARD==DEFAULT"
      }
    },
    "I_BUF_DS.IOSTANDARD" : {
      "rules" : {
        "IOSTANDARD" : "__arg0__"
      },
      "results" : {
        "I_BUF_DS" : "IOSTANDARD==__arg0__"
      },
      "neg_results" : {
        "I_BUF_DS" : "IOSTANDARD==DEFAULT"
      }
    },
    "O_BUF.IOSTANDARD" : {
      "rules" : {
        "IOSTANDARD" : "__arg0__"
      },
      "results" : {
        "O_BUF" : "IOSTANDARD==__arg0__"
      },
      "neg_results" : {
        "O_BUF" : "IOSTANDARD==DEFAULT"
      }
    },
    "O_BUF_DS.IOSTANDARD" : {
      "rules" : {
        "IOSTANDARD" : "__arg0__"
      },
      "results" : {
        "O_BUF_DS" : "IOSTANDARD==__arg0__"
      },
      "neg_results" : {
        "O_BUF_DS" : "IOSTANDARD==DEFAULT"
      }
    },
    "O_BUFT.IOSTANDARD" : {
      "rules" : {
        "IOSTANDARD" : "__arg0__"
      },
      "results" : {
        "O_BUFT" : "IOSTANDARD==__arg0__"
      },
      "neg_results" : {
        "O_BUFT" : "IOSTANDARD==DEFAULT"
      }
    },
    "O_BUFT_DS.IOSTANDARD" : {
      "rules" : {
        "IOSTANDARD" : "__arg0__"
      },
      "results" : {
        "O_BUFT_DS" : "IOSTANDARD==__arg0__"
      },
      "neg_results" : {
        "O_BUFT_DS" : "IOSTANDARD==DEFAULT"
      }
    },
    "CLK_BUF.GBOX_TOP" : {
      "rules" : {
      },
      "results" : {
        "CLK_BUF" : "GBOX_TOP_SRC==DEFAULT"
      }
    }
  },
  "__init_file__" : {
    "__args__" : [],
    "__file__" : [
      "import re",
      "MAX_BOOT_CLOCK_RESOURCE = 1",
      "hp_banks = ['HP_%d' % i for i in [1, 2]]",
      "hr_banks = ['HR_%d' % i for i in [1, 2, 3, 5]]",
      "all_banks = hp_banks + hr_banks",
      "bank_pin_count = 40",
      "CC_index = [18, 19, 38, 39]",
      "exclude_index = []",
      "pin_list = ['%s%d_%d%c' % ('CC_' if i in CC_index else '', i, i//2, 'N' if i%2 else 'P') for i in range(bank_pin_count) if i not in exclude_index]",
      "cc_p_pin_list = [pin for pin in pin_list if (pin.find('CC_') == 0 and pin[-1] == 'P')]",
      "g_all_pins = ['%s_%s' % (i, j) for i in all_banks for j in pin_list]",
      "g_all_clock_pins = ['%s_%s' % (i, j) for i in all_banks for j in cc_p_pin_list]",
      "g_all_pll_clock_pins = [pin for pin in g_all_clock_pins]",
      "g_boot_clock_resources = 0",
      "g_pin_resources = {}",
      "g_input_gearbox_width = {}",
      "g_output_gearbox_width = {}",
      "def parse_pin_location(location):",
      "  assert location in g_all_pins",
      "  m = re.search(r'H(P|R?)_(\\d?)(|_CC?)_(\\d+?)_(\\d\\d?)(P|N?)', location)",
      "  assert m != None",
      "  assert len(m.groups()) == 6",
      "  type = 'HP' if m.group(1) == 'P' else ('HVL' if m.group(2) in ['1', '2'] else 'HVR')",
      "  bank = 0 if m.group(2) in ['1', '3'] else 1",
      "  is_clock = m.group(3) == '_CC'",
      "  index = int(m.group(4))",
      "  pair_index = int(m.group(5))",
      "  assert pair_index == (index//2)",
      "  ab_io = 0 if (pair_index < 10) else 1",
      "  ab_name = '%c' % (ord('A') + ab_io)",
      "  return [m, type, bank, is_clock, index, pair_index, ab_io, ab_name]",
      "def get_peer_location(location):",
      "  (m, type, bank, is_clock, index, pair_index, ab_io, ab_name) = parse_pin_location(location)",
      "  pn = 'P' if m.group(6) == 'N' else 'N'",
      "  index = int(m.group(4)) & ~1",
      "  index += (1 if pn == 'N' else 0)",
      "  peer_location = 'H%s_%s%s_%d_%s%s' % (m.group(1), m.group(2), m.group(3), index, m.group(5), pn)",
      "  return [m.group(6), peer_location]",
      "def validate_data_width_parameter(location, width, gearboxes):",
      "  (self_pn, peer_location) = get_peer_location(location)",
      "  result = width >= 3 and width <= (10 if self_pn == 'P' else 5)",
      "  result = result and ((peer_location not in gearboxes) or (gearboxes[peer_location] <= 5 and width <=5))",
      "  gearboxes[location if result else ''] = width",
      "  gearboxes.pop('', None)",
      "  return result",
      "def get_pin_info(name):",
      "  bank = 0",
      "  is_clock = False",
      "  index = 0",
      "  pair_index = 0",
      "  ab_io = 0",
      "  ab_name = ''",
      "  if name.find('BOOT_CLOCK#') == 0:",
      "    type = 'BOOT_CLOCK'",
      "    index = int(name[11:])",
      "    model_name = 'hp_40x2.rc_osc_50mhz'",
      "  elif name.find('FABRIC_CLKBUF#') == 0:",
      "    type = 'FABRIC_CLKBUF'",
      "    index = int(name[14:])",
      "    model_name = 'fclk_buf'",
      "  else :",
      "    (m, type, bank, is_clock, index, pair_index, ab_io, ab_name) = parse_pin_location(name)",
      "    model_name = '%s_40x2.bank%d_hpio.gearbox_%s[%d]' % (type.lower(), bank, m.group(6), pair_index)",
      "  return [type, bank, is_clock, index, pair_index, ab_io, ab_name, model_name]"
    ]
  },
  "__primary_validation__" : {
    "__seqeunce__" : [
      "__pin_is_valid__",
      "__check_pin_resource__",
      "__ds_pin_is_valid__",
      "__pin_is_differential__",
      "__check_ds_pin_resource__",
      "__clock_pin_is_valid__",
      "__check_boot_clock_resource__",
      "__pll_clock_pin_is_valid__",
      "__check_input_data_width_parameter__",
      "__check_output_data_width_parameter__",
      "__check_data_rate_parameter__",
      "__check_dpa_mode_parameter__",
      "__check_clock_phase_parameter__",
      "__check_pll_parameter__"
    ],
    "__pin_is_valid__" : {
      "__module__" : ["I_BUF", "O_BUF", "O_BUFT"],
      "__equation__" : [
        "validation_result = '__location0__' in g_all_pins"
      ]
    },
    "__check_pin_resource__" : {
      "__module__" : ["I_BUF", "O_BUF", "O_BUFT"],
      "__equation__" : [
        "temp = '__primitive_flags__'.split(',')",
        "bidir = 'INOUT' in temp",
        "value = 1 if 'I_BUF' in temp else 2",
        "validation_result = '__location0__' not in g_pin_resources or ((g_pin_resources['__location0__'] & value) == 0)",
        "exist = 0 if '__location0__' not in g_pin_resources else g_pin_resources['__location0__']",
        "g_pin_resources['__location0__' if validation_result else ''] = exist | (value if bidir else 3)",
        "g_pin_resources.pop('', None)"
      ]
    },
    "__ds_pin_is_valid__" : {
      "__module__" : ["I_BUF_DS", "O_BUF_DS", "O_BUFT_DS"],
      "__equation__" : [
        "validation_result = '__location0__' in g_all_pins",
        "validation_result = validation_result and '__location1__' in g_all_pins"
      ]
    },
    "__pin_is_differential__" : {
      "__module__" : ["I_BUF_DS", "O_BUF_DS", "O_BUFT_DS"],
      "__equation__" : [
        "import re",
        "validation_result = '__location0__' in g_all_pins",
        "validation_result = validation_result and '__location1__' in g_all_pins",
        "m0 = re.search(r'H(P|R?)_(\\d?)(|_CC?)_(\\d+?)_(\\d\\d?)(P|N?)', '__location0__')",
        "m1 = re.search(r'H(P|R?)_(\\d?)(|_CC?)_(\\d+?)_(\\d\\d?)(P|N?)', '__location1__')",
        "validation_result = validation_result and m0 != None",
        "validation_result = validation_result and m1 != None",
        "validation_result = validation_result and len(m0.groups()) == 6",
        "validation_result = validation_result and len(m1.groups()) == 6",
        "validation_result = validation_result and m0.group(1) == m1.group(1)",
        "validation_result = validation_result and m0.group(2) == m1.group(2)",
        "validation_result = validation_result and m0.group(3) == m1.group(3)",
        "validation_result = validation_result and m0.group(4) != m1.group(4)",
        "validation_result = validation_result and m0.group(5) == m1.group(5)",
        "validation_result = validation_result and m0.group(6) != m1.group(6)"
      ]
    },
    "__check_ds_pin_resource__" : {
      "__module__" : ["I_BUF_DS", "O_BUF_DS", "O_BUFT_DS"],
      "__equation__" : [
        "validation_result = '__location0__' not in g_pin_resources",
        "validation_result = validation_result and '__location1__' not in g_pin_resources",
        "g_pin_resources['__location0__' if validation_result else ''] = 3",
        "g_pin_resources.pop('', None)",
        "g_pin_resources['__location1__' if validation_result else ''] = 3",
        "g_pin_resources.pop('', None)"
      ]
    },
    "__clock_pin_is_valid__" : {
      "__module__" : ["CLK_BUF"],
      "__equation__" : [
        "temp = '__primitive_flags__'.split(',')",
        "validation_result = '__location0__' in g_all_clock_pins or 'PIN_CLOCK_CORE_ONLY' in temp"
      ]
    },
    "__check_boot_clock_resource__" : {
      "__module__" : ["BOOT_CLOCK"],
      "__equation__" : [
        "validation_result = g_boot_clock_resources < MAX_BOOT_CLOCK_RESOURCE",
        "g_boot_clock_resources += (1 if validation_result else 0)"
      ]
    },
    "__pll_clock_pin_is_valid__" : {
      "__module__" : ["PLL"],
      "pre_primitive" : "CLK_BUF",
      "__equation__" : [
        "validation_result = '__location0__' in g_all_pll_clock_pins"
      ]
    },
    "__check_input_data_width_parameter__" : {
      "__module__" : ["I_SERDES"],
      "__parameter__" : ["WIDTH"],
      "__equation__" : [
        "validation_result = validate_data_width_parameter('__location__', int('WIDTH'), g_input_gearbox_width)"
      ]
    },
    "__check_output_data_width_parameter__" : {
      "__module__" : ["O_SERDES"],
      "__parameter__" : ["WIDTH"],
      "__equation__" : [
        "validation_result = validate_data_width_parameter('__location__', int('WIDTH'), g_output_gearbox_width)"
      ]
    },
    "__check_data_rate_parameter__" : {
      "__module__" : ["I_SERDES", "O_SERDES", "O_SERDES_CLK"],
      "__parameter__" : ["DATA_RATE"],
      "__equation__" : [
        "validation_result = 'DATA_RATE' in ['SDR', 'DDR']"
      ]
    },
    "__check_dpa_mode_parameter__" : {
      "__module__" : ["I_SERDES"],
      "__parameter__" : ["DPA_MODE"],
      "__equation__" : [
        "validation_result = 'DPA_MODE' in ['NONE', 'DPA', 'CDR']"
      ]
    },
    "__check_clock_phase_parameter__" : {
      "__module__" : ["O_SERDES_CLK"],
      "__parameter__" : ["CLOCK_PHASE"],
      "__equation__" : [
        "validation_result = 'CLOCK_PHASE' in ['0', '90', '180', '270']"
      ]
    },
    "__check_pll_parameter__" : {
      "__module__" : ["PLL"],
      "__parameter__" : ["PLL_DIV", "PLL_MULT", "PLL_POST_DIV"],
      "__equation__" : [
        "div = int('PLL_DIV', 0)",
        "mult = int('PLL_MULT', 0)",
        "post_div = int('PLL_POST_DIV', 0)",
        "post_div1 = post_div >> 4",
        "post_div2 = post_div & 0xF",
        "validation_result = (div >= 1 and div <= 63)",
        "validation_result = validation_result and (mult >= 16 and mult <= 640)",
        "validation_result = validation_result and (post_div1 >= 1 and post_div1 <= 7)",
        "validation_result = validation_result and (post_div2 >= 1 and post_div2 <= 7)",
        "validation_result = validation_result and (post_div1 >= post_div2)"
      ]
    }
  },
  "__define__" : {
    "parse_o_serdes_clk_phase_parameter" : {
      "__args__" : ["__clock_phase__"],
      "__equation__" : [
        "__clock_phase__ = 'TX_phase_%d' % __argCLOCK_PHASE__"
      ]
    },
    "parse_serdes_width" : {
      "__args__" : ["__peer_is_on__"],
      "__equation__" : [
        "width = int('__arg0__')",
        "__peer_is_on__ = 'PEER_on' if width <= 5 else 'PEER_off'"
      ]
    }
  }
}