
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys-Verific 0.0.80
 Yosys 0.18+10 (git sha1 f8419a600, gcc 9.4.0-1ubuntu1~20.04.1 -fPIC -Os)


-- Executing script file `and2VErilog.ys' --

1. Executing VERIFIC (loading SystemVerilog and VHDL designs using Verific).
Built with Verific May22_SW_Release, released at Wed Jun  1 05:39:28 2022.

2. Executing VERIFIC (loading SystemVerilog and VHDL designs using Verific).
Built with Verific May22_SW_Release, released at Wed Jun  1 05:39:28 2022.

3. Executing VERIFIC (loading SystemVerilog and VHDL designs using Verific).
Built with Verific May22_SW_Release, released at Wed Jun  1 05:39:28 2022.

4. Executing VERIFIC (loading SystemVerilog and VHDL designs using Verific).
Built with Verific May22_SW_Release, released at Wed Jun  1 05:39:28 2022.
VERIFIC-COMMENT [VERI-1482] Analyzing Verilog file '/nfs_scratch/scratch/eda/behzad/bs/Raptor/tests/Testcases/and2_testcase/./rtl/and2.v'

5. Executing VERIFIC (loading SystemVerilog and VHDL designs using Verific).
Built with Verific May22_SW_Release, released at Wed Jun  1 05:39:28 2022.
Adding Verilog module 'and2' to elaboration queue.
Running hier_tree::Elaborate().
VERIFIC-INFO [VERI-1018] /nfs_scratch/scratch/eda/behzad/bs/Raptor/tests/Testcases/and2_testcase/./rtl/and2.v:7: compiling module 'and2'
Importing module and2.

6. Executing HIERARCHY pass (managing design hierarchy).

6.1. Analyzing design hierarchy..
Top module:  \and2

6.2. Analyzing design hierarchy..
Top module:  \and2
Removed 0 unused modules.

7. Executing SYNTH_QUICKLOGIC pass.

7.1. Executing Verilog-2005 frontend: /nfs_scratch/scratch/eda/behzad/bs/Raptor/yosys_verific_rs/yosys/install/share/yosys/quicklogic/common/cells_sim.v
Parsing Verilog input from `/nfs_scratch/scratch/eda/behzad/bs/Raptor/yosys_verific_rs/yosys/install/share/yosys/quicklogic/common/cells_sim.v' to AST representation.
Generating RTLIL representation for module `\inv'.
Generating RTLIL representation for module `\buff'.
Generating RTLIL representation for module `\logic_0'.
Generating RTLIL representation for module `\logic_1'.
Generating RTLIL representation for module `\gclkbuff'.
Successfully finished Verilog frontend.

7.2. Executing Verilog-2005 frontend: /nfs_scratch/scratch/eda/behzad/bs/Raptor/yosys_verific_rs/yosys/install/share/yosys/quicklogic/qlf_k6n10f/cells_sim.v
Parsing Verilog input from `/nfs_scratch/scratch/eda/behzad/bs/Raptor/yosys_verific_rs/yosys/install/share/yosys/quicklogic/qlf_k6n10f/cells_sim.v' to AST representation.
Generating RTLIL representation for module `\sh_dff'.
Generating RTLIL representation for module `\adder_carry'.
Generating RTLIL representation for module `\adder_lut5'.
Generating RTLIL representation for module `\frac_lut6'.
Generating RTLIL representation for module `\dff'.
Generating RTLIL representation for module `\dffn'.
Generating RTLIL representation for module `\dffsre'.
Generating RTLIL representation for module `\dffnsre'.
Generating RTLIL representation for module `\sdffsre'.
Generating RTLIL representation for module `\sdffnsre'.
Generating RTLIL representation for module `\latchsre'.
Generating RTLIL representation for module `\latchnsre'.
Generating RTLIL representation for module `\TDP_BRAM18'.
Generating RTLIL representation for module `\TDP36K'.
Generating RTLIL representation for module `\BRAM2x18_TDP'.
Generating RTLIL representation for module `\BRAM2x18_SDP'.
Generating RTLIL representation for module `\_$_mem_v2_asymmetric'.
Successfully finished Verilog frontend.

7.3. Executing Verilog-2005 frontend: /nfs_scratch/scratch/eda/behzad/bs/Raptor/yosys_verific_rs/yosys/install/share/yosys/quicklogic/qlf_k6n10f/dsp_sim.v
Parsing Verilog input from `/nfs_scratch/scratch/eda/behzad/bs/Raptor/yosys_verific_rs/yosys/install/share/yosys/quicklogic/qlf_k6n10f/dsp_sim.v' to AST representation.
Generating RTLIL representation for module `\QL_DSP1'.
Generating RTLIL representation for module `\QL_DSP2'.
Generating RTLIL representation for module `\QL_DSP2_MULT'.
Generating RTLIL representation for module `\QL_DSP2_MULT_REGIN'.
Generating RTLIL representation for module `\QL_DSP2_MULT_REGOUT'.
Generating RTLIL representation for module `\QL_DSP2_MULT_REGIN_REGOUT'.
Generating RTLIL representation for module `\QL_DSP2_MULTADD'.
Generating RTLIL representation for module `\QL_DSP2_MULTADD_REGIN'.
Generating RTLIL representation for module `\QL_DSP2_MULTADD_REGOUT'.
Generating RTLIL representation for module `\QL_DSP2_MULTADD_REGIN_REGOUT'.
Generating RTLIL representation for module `\QL_DSP2_MULTACC'.
Generating RTLIL representation for module `\QL_DSP2_MULTACC_REGIN'.
Generating RTLIL representation for module `\QL_DSP2_MULTACC_REGOUT'.
Generating RTLIL representation for module `\QL_DSP2_MULTACC_REGIN_REGOUT'.
Generating RTLIL representation for module `\dsp_t1_20x18x64_cfg_ports'.
Generating RTLIL representation for module `\dsp_t1_10x9x32_cfg_ports'.
Generating RTLIL representation for module `\dsp_t1_sim_cfg_ports'.
Generating RTLIL representation for module `\QL_DSP3'.
Generating RTLIL representation for module `\QL_DSP3_MULT'.
Generating RTLIL representation for module `\QL_DSP3_MULT_REGIN'.
Generating RTLIL representation for module `\QL_DSP3_MULT_REGOUT'.
Generating RTLIL representation for module `\QL_DSP3_MULT_REGIN_REGOUT'.
Generating RTLIL representation for module `\QL_DSP3_MULTADD'.
Generating RTLIL representation for module `\QL_DSP3_MULTADD_REGIN'.
Generating RTLIL representation for module `\QL_DSP3_MULTADD_REGOUT'.
Generating RTLIL representation for module `\QL_DSP3_MULTADD_REGIN_REGOUT'.
Generating RTLIL representation for module `\QL_DSP3_MULTACC'.
Generating RTLIL representation for module `\QL_DSP3_MULTACC_REGIN'.
Generating RTLIL representation for module `\QL_DSP3_MULTACC_REGOUT'.
Generating RTLIL representation for module `\QL_DSP3_MULTACC_REGIN_REGOUT'.
Generating RTLIL representation for module `\dsp_t1_20x18x64_cfg_params'.
Generating RTLIL representation for module `\dsp_t1_10x9x32_cfg_params'.
Generating RTLIL representation for module `\dsp_t1_sim_cfg_params'.
Successfully finished Verilog frontend.

7.4. Executing HIERARCHY pass (managing design hierarchy).

7.4.1. Analyzing design hierarchy..
Top module:  \and2

7.4.2. Analyzing design hierarchy..
Top module:  \and2
Removed 0 unused modules.

7.5. Executing PROC pass (convert processes to netlists).

7.5.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

7.5.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 2 switch rules as full_case in process $proc$/nfs_scratch/scratch/eda/behzad/bs/Raptor/yosys_verific_rs/yosys/install/share/yosys/quicklogic/qlf_k6n10f/cells_sim.v:277$43 in module latchnsre.
Marked 2 switch rules as full_case in process $proc$/nfs_scratch/scratch/eda/behzad/bs/Raptor/yosys_verific_rs/yosys/install/share/yosys/quicklogic/qlf_k6n10f/cells_sim.v:254$38 in module latchsre.
Marked 2 switch rules as full_case in process $proc$/nfs_scratch/scratch/eda/behzad/bs/Raptor/yosys_verific_rs/yosys/install/share/yosys/quicklogic/qlf_k6n10f/cells_sim.v:233$34 in module sdffnsre.
Marked 2 switch rules as full_case in process $proc$/nfs_scratch/scratch/eda/behzad/bs/Raptor/yosys_verific_rs/yosys/install/share/yosys/quicklogic/qlf_k6n10f/cells_sim.v:211$30 in module sdffsre.
Marked 2 switch rules as full_case in process $proc$/nfs_scratch/scratch/eda/behzad/bs/Raptor/yosys_verific_rs/yosys/install/share/yosys/quicklogic/qlf_k6n10f/cells_sim.v:189$26 in module dffnsre.
Marked 2 switch rules as full_case in process $proc$/nfs_scratch/scratch/eda/behzad/bs/Raptor/yosys_verific_rs/yosys/install/share/yosys/quicklogic/qlf_k6n10f/cells_sim.v:167$22 in module dffsre.
Removed a total of 0 dead cases.

7.5.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 12 assignments to connections.

7.5.4. Executing PROC_INIT pass (extract init attributes).
Found init rule in `\latchnsre.$proc$/nfs_scratch/scratch/eda/behzad/bs/Raptor/yosys_verific_rs/yosys/install/share/yosys/quicklogic/qlf_k6n10f/cells_sim.v:0$48'.
  Set init value: \Q = 1'0
Found init rule in `\latchsre.$proc$/nfs_scratch/scratch/eda/behzad/bs/Raptor/yosys_verific_rs/yosys/install/share/yosys/quicklogic/qlf_k6n10f/cells_sim.v:0$42'.
  Set init value: \Q = 1'0
Found init rule in `\sdffnsre.$proc$/nfs_scratch/scratch/eda/behzad/bs/Raptor/yosys_verific_rs/yosys/install/share/yosys/quicklogic/qlf_k6n10f/cells_sim.v:0$37'.
  Set init value: \Q = 1'0
Found init rule in `\sdffsre.$proc$/nfs_scratch/scratch/eda/behzad/bs/Raptor/yosys_verific_rs/yosys/install/share/yosys/quicklogic/qlf_k6n10f/cells_sim.v:0$33'.
  Set init value: \Q = 1'0
Found init rule in `\dffnsre.$proc$/nfs_scratch/scratch/eda/behzad/bs/Raptor/yosys_verific_rs/yosys/install/share/yosys/quicklogic/qlf_k6n10f/cells_sim.v:0$29'.
  Set init value: \Q = 1'0
Found init rule in `\dffsre.$proc$/nfs_scratch/scratch/eda/behzad/bs/Raptor/yosys_verific_rs/yosys/install/share/yosys/quicklogic/qlf_k6n10f/cells_sim.v:0$25'.
  Set init value: \Q = 1'0
Found init rule in `\dffn.$proc$/nfs_scratch/scratch/eda/behzad/bs/Raptor/yosys_verific_rs/yosys/install/share/yosys/quicklogic/qlf_k6n10f/cells_sim.v:0$21'.
  Set init value: \Q = 1'0
Found init rule in `\dff.$proc$/nfs_scratch/scratch/eda/behzad/bs/Raptor/yosys_verific_rs/yosys/install/share/yosys/quicklogic/qlf_k6n10f/cells_sim.v:0$19'.
  Set init value: \Q = 1'0
Found init rule in `\sh_dff.$proc$/nfs_scratch/scratch/eda/behzad/bs/Raptor/yosys_verific_rs/yosys/install/share/yosys/quicklogic/qlf_k6n10f/cells_sim.v:0$5'.
  Set init value: \Q = 1'0

7.5.5. Executing PROC_ARST pass (detect async resets in processes).
Found async reset \R in `\dffnsre.$proc$/nfs_scratch/scratch/eda/behzad/bs/Raptor/yosys_verific_rs/yosys/install/share/yosys/quicklogic/qlf_k6n10f/cells_sim.v:189$26'.
Found async reset \S in `\dffnsre.$proc$/nfs_scratch/scratch/eda/behzad/bs/Raptor/yosys_verific_rs/yosys/install/share/yosys/quicklogic/qlf_k6n10f/cells_sim.v:189$26'.
Found async reset \R in `\dffsre.$proc$/nfs_scratch/scratch/eda/behzad/bs/Raptor/yosys_verific_rs/yosys/install/share/yosys/quicklogic/qlf_k6n10f/cells_sim.v:167$22'.
Found async reset \S in `\dffsre.$proc$/nfs_scratch/scratch/eda/behzad/bs/Raptor/yosys_verific_rs/yosys/install/share/yosys/quicklogic/qlf_k6n10f/cells_sim.v:167$22'.

7.5.6. Executing PROC_ROM pass (convert switches to ROMs).
Converted 0 switches.
<suppressed ~14 debug messages>

7.5.7. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\latchnsre.$proc$/nfs_scratch/scratch/eda/behzad/bs/Raptor/yosys_verific_rs/yosys/install/share/yosys/quicklogic/qlf_k6n10f/cells_sim.v:0$48'.
Creating decoders for process `\latchnsre.$proc$/nfs_scratch/scratch/eda/behzad/bs/Raptor/yosys_verific_rs/yosys/install/share/yosys/quicklogic/qlf_k6n10f/cells_sim.v:277$43'.
     1/1: $0\Q[0:0]
Creating decoders for process `\latchsre.$proc$/nfs_scratch/scratch/eda/behzad/bs/Raptor/yosys_verific_rs/yosys/install/share/yosys/quicklogic/qlf_k6n10f/cells_sim.v:0$42'.
Creating decoders for process `\latchsre.$proc$/nfs_scratch/scratch/eda/behzad/bs/Raptor/yosys_verific_rs/yosys/install/share/yosys/quicklogic/qlf_k6n10f/cells_sim.v:254$38'.
     1/1: $0\Q[0:0]
Creating decoders for process `\sdffnsre.$proc$/nfs_scratch/scratch/eda/behzad/bs/Raptor/yosys_verific_rs/yosys/install/share/yosys/quicklogic/qlf_k6n10f/cells_sim.v:0$37'.
Creating decoders for process `\sdffnsre.$proc$/nfs_scratch/scratch/eda/behzad/bs/Raptor/yosys_verific_rs/yosys/install/share/yosys/quicklogic/qlf_k6n10f/cells_sim.v:233$34'.
     1/1: $0\Q[0:0]
Creating decoders for process `\sdffsre.$proc$/nfs_scratch/scratch/eda/behzad/bs/Raptor/yosys_verific_rs/yosys/install/share/yosys/quicklogic/qlf_k6n10f/cells_sim.v:0$33'.
Creating decoders for process `\sdffsre.$proc$/nfs_scratch/scratch/eda/behzad/bs/Raptor/yosys_verific_rs/yosys/install/share/yosys/quicklogic/qlf_k6n10f/cells_sim.v:211$30'.
     1/1: $0\Q[0:0]
Creating decoders for process `\dffnsre.$proc$/nfs_scratch/scratch/eda/behzad/bs/Raptor/yosys_verific_rs/yosys/install/share/yosys/quicklogic/qlf_k6n10f/cells_sim.v:0$29'.
Creating decoders for process `\dffnsre.$proc$/nfs_scratch/scratch/eda/behzad/bs/Raptor/yosys_verific_rs/yosys/install/share/yosys/quicklogic/qlf_k6n10f/cells_sim.v:189$26'.
     1/1: $0\Q[0:0]
Creating decoders for process `\dffsre.$proc$/nfs_scratch/scratch/eda/behzad/bs/Raptor/yosys_verific_rs/yosys/install/share/yosys/quicklogic/qlf_k6n10f/cells_sim.v:0$25'.
Creating decoders for process `\dffsre.$proc$/nfs_scratch/scratch/eda/behzad/bs/Raptor/yosys_verific_rs/yosys/install/share/yosys/quicklogic/qlf_k6n10f/cells_sim.v:167$22'.
     1/1: $0\Q[0:0]
Creating decoders for process `\dffn.$proc$/nfs_scratch/scratch/eda/behzad/bs/Raptor/yosys_verific_rs/yosys/install/share/yosys/quicklogic/qlf_k6n10f/cells_sim.v:0$21'.
Creating decoders for process `\dffn.$proc$/nfs_scratch/scratch/eda/behzad/bs/Raptor/yosys_verific_rs/yosys/install/share/yosys/quicklogic/qlf_k6n10f/cells_sim.v:150$20'.
Creating decoders for process `\dff.$proc$/nfs_scratch/scratch/eda/behzad/bs/Raptor/yosys_verific_rs/yosys/install/share/yosys/quicklogic/qlf_k6n10f/cells_sim.v:0$19'.
Creating decoders for process `\dff.$proc$/nfs_scratch/scratch/eda/behzad/bs/Raptor/yosys_verific_rs/yosys/install/share/yosys/quicklogic/qlf_k6n10f/cells_sim.v:136$18'.
Creating decoders for process `\sh_dff.$proc$/nfs_scratch/scratch/eda/behzad/bs/Raptor/yosys_verific_rs/yosys/install/share/yosys/quicklogic/qlf_k6n10f/cells_sim.v:0$5'.
Creating decoders for process `\sh_dff.$proc$/nfs_scratch/scratch/eda/behzad/bs/Raptor/yosys_verific_rs/yosys/install/share/yosys/quicklogic/qlf_k6n10f/cells_sim.v:28$4'.

7.5.8. Executing PROC_DLATCH pass (convert process syncs to latches).

7.5.9. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\latchnsre.\Q' using process `\latchnsre.$proc$/nfs_scratch/scratch/eda/behzad/bs/Raptor/yosys_verific_rs/yosys/install/share/yosys/quicklogic/qlf_k6n10f/cells_sim.v:277$43'.
  created direct connection (no actual register cell created).
Creating register for signal `\latchsre.\Q' using process `\latchsre.$proc$/nfs_scratch/scratch/eda/behzad/bs/Raptor/yosys_verific_rs/yosys/install/share/yosys/quicklogic/qlf_k6n10f/cells_sim.v:254$38'.
  created direct connection (no actual register cell created).
Creating register for signal `\sdffnsre.\Q' using process `\sdffnsre.$proc$/nfs_scratch/scratch/eda/behzad/bs/Raptor/yosys_verific_rs/yosys/install/share/yosys/quicklogic/qlf_k6n10f/cells_sim.v:233$34'.
  created $dff cell `$procdff$85' with negative edge clock.
Creating register for signal `\sdffsre.\Q' using process `\sdffsre.$proc$/nfs_scratch/scratch/eda/behzad/bs/Raptor/yosys_verific_rs/yosys/install/share/yosys/quicklogic/qlf_k6n10f/cells_sim.v:211$30'.
  created $dff cell `$procdff$86' with positive edge clock.
Creating register for signal `\dffnsre.\Q' using process `\dffnsre.$proc$/nfs_scratch/scratch/eda/behzad/bs/Raptor/yosys_verific_rs/yosys/install/share/yosys/quicklogic/qlf_k6n10f/cells_sim.v:189$26'.
Warning: Complex async reset for dff `\Q'.
  created $dffsr cell `$procdff$103' with negative edge clock and multiple level-sensitive resets.
Creating register for signal `\dffsre.\Q' using process `\dffsre.$proc$/nfs_scratch/scratch/eda/behzad/bs/Raptor/yosys_verific_rs/yosys/install/share/yosys/quicklogic/qlf_k6n10f/cells_sim.v:167$22'.
Warning: Complex async reset for dff `\Q'.
  created $dffsr cell `$procdff$120' with positive edge clock and multiple level-sensitive resets.
Creating register for signal `\dffn.\Q' using process `\dffn.$proc$/nfs_scratch/scratch/eda/behzad/bs/Raptor/yosys_verific_rs/yosys/install/share/yosys/quicklogic/qlf_k6n10f/cells_sim.v:150$20'.
  created $dff cell `$procdff$121' with negative edge clock.
Creating register for signal `\dff.\Q' using process `\dff.$proc$/nfs_scratch/scratch/eda/behzad/bs/Raptor/yosys_verific_rs/yosys/install/share/yosys/quicklogic/qlf_k6n10f/cells_sim.v:136$18'.
  created $dff cell `$procdff$122' with positive edge clock.
Creating register for signal `\sh_dff.\Q' using process `\sh_dff.$proc$/nfs_scratch/scratch/eda/behzad/bs/Raptor/yosys_verific_rs/yosys/install/share/yosys/quicklogic/qlf_k6n10f/cells_sim.v:28$4'.
  created $dff cell `$procdff$123' with positive edge clock.

7.5.10. Executing PROC_MEMWR pass (convert process memory writes to cells).

7.5.11. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Removing empty process `latchnsre.$proc$/nfs_scratch/scratch/eda/behzad/bs/Raptor/yosys_verific_rs/yosys/install/share/yosys/quicklogic/qlf_k6n10f/cells_sim.v:0$48'.
Found and cleaned up 3 empty switches in `\latchnsre.$proc$/nfs_scratch/scratch/eda/behzad/bs/Raptor/yosys_verific_rs/yosys/install/share/yosys/quicklogic/qlf_k6n10f/cells_sim.v:277$43'.
Removing empty process `latchnsre.$proc$/nfs_scratch/scratch/eda/behzad/bs/Raptor/yosys_verific_rs/yosys/install/share/yosys/quicklogic/qlf_k6n10f/cells_sim.v:277$43'.
Removing empty process `latchsre.$proc$/nfs_scratch/scratch/eda/behzad/bs/Raptor/yosys_verific_rs/yosys/install/share/yosys/quicklogic/qlf_k6n10f/cells_sim.v:0$42'.
Found and cleaned up 3 empty switches in `\latchsre.$proc$/nfs_scratch/scratch/eda/behzad/bs/Raptor/yosys_verific_rs/yosys/install/share/yosys/quicklogic/qlf_k6n10f/cells_sim.v:254$38'.
Removing empty process `latchsre.$proc$/nfs_scratch/scratch/eda/behzad/bs/Raptor/yosys_verific_rs/yosys/install/share/yosys/quicklogic/qlf_k6n10f/cells_sim.v:254$38'.
Removing empty process `sdffnsre.$proc$/nfs_scratch/scratch/eda/behzad/bs/Raptor/yosys_verific_rs/yosys/install/share/yosys/quicklogic/qlf_k6n10f/cells_sim.v:0$37'.
Found and cleaned up 3 empty switches in `\sdffnsre.$proc$/nfs_scratch/scratch/eda/behzad/bs/Raptor/yosys_verific_rs/yosys/install/share/yosys/quicklogic/qlf_k6n10f/cells_sim.v:233$34'.
Removing empty process `sdffnsre.$proc$/nfs_scratch/scratch/eda/behzad/bs/Raptor/yosys_verific_rs/yosys/install/share/yosys/quicklogic/qlf_k6n10f/cells_sim.v:233$34'.
Removing empty process `sdffsre.$proc$/nfs_scratch/scratch/eda/behzad/bs/Raptor/yosys_verific_rs/yosys/install/share/yosys/quicklogic/qlf_k6n10f/cells_sim.v:0$33'.
Found and cleaned up 3 empty switches in `\sdffsre.$proc$/nfs_scratch/scratch/eda/behzad/bs/Raptor/yosys_verific_rs/yosys/install/share/yosys/quicklogic/qlf_k6n10f/cells_sim.v:211$30'.
Removing empty process `sdffsre.$proc$/nfs_scratch/scratch/eda/behzad/bs/Raptor/yosys_verific_rs/yosys/install/share/yosys/quicklogic/qlf_k6n10f/cells_sim.v:211$30'.
Removing empty process `dffnsre.$proc$/nfs_scratch/scratch/eda/behzad/bs/Raptor/yosys_verific_rs/yosys/install/share/yosys/quicklogic/qlf_k6n10f/cells_sim.v:0$29'.
Found and cleaned up 1 empty switch in `\dffnsre.$proc$/nfs_scratch/scratch/eda/behzad/bs/Raptor/yosys_verific_rs/yosys/install/share/yosys/quicklogic/qlf_k6n10f/cells_sim.v:189$26'.
Removing empty process `dffnsre.$proc$/nfs_scratch/scratch/eda/behzad/bs/Raptor/yosys_verific_rs/yosys/install/share/yosys/quicklogic/qlf_k6n10f/cells_sim.v:189$26'.
Removing empty process `dffsre.$proc$/nfs_scratch/scratch/eda/behzad/bs/Raptor/yosys_verific_rs/yosys/install/share/yosys/quicklogic/qlf_k6n10f/cells_sim.v:0$25'.
Found and cleaned up 1 empty switch in `\dffsre.$proc$/nfs_scratch/scratch/eda/behzad/bs/Raptor/yosys_verific_rs/yosys/install/share/yosys/quicklogic/qlf_k6n10f/cells_sim.v:167$22'.
Removing empty process `dffsre.$proc$/nfs_scratch/scratch/eda/behzad/bs/Raptor/yosys_verific_rs/yosys/install/share/yosys/quicklogic/qlf_k6n10f/cells_sim.v:167$22'.
Removing empty process `dffn.$proc$/nfs_scratch/scratch/eda/behzad/bs/Raptor/yosys_verific_rs/yosys/install/share/yosys/quicklogic/qlf_k6n10f/cells_sim.v:0$21'.
Removing empty process `dffn.$proc$/nfs_scratch/scratch/eda/behzad/bs/Raptor/yosys_verific_rs/yosys/install/share/yosys/quicklogic/qlf_k6n10f/cells_sim.v:150$20'.
Removing empty process `dff.$proc$/nfs_scratch/scratch/eda/behzad/bs/Raptor/yosys_verific_rs/yosys/install/share/yosys/quicklogic/qlf_k6n10f/cells_sim.v:0$19'.
Removing empty process `dff.$proc$/nfs_scratch/scratch/eda/behzad/bs/Raptor/yosys_verific_rs/yosys/install/share/yosys/quicklogic/qlf_k6n10f/cells_sim.v:136$18'.
Removing empty process `sh_dff.$proc$/nfs_scratch/scratch/eda/behzad/bs/Raptor/yosys_verific_rs/yosys/install/share/yosys/quicklogic/qlf_k6n10f/cells_sim.v:0$5'.
Removing empty process `sh_dff.$proc$/nfs_scratch/scratch/eda/behzad/bs/Raptor/yosys_verific_rs/yosys/install/share/yosys/quicklogic/qlf_k6n10f/cells_sim.v:28$4'.
Cleaned up 14 empty switches.

7.5.12. Executing OPT_EXPR pass (perform const folding).
Optimizing module and2.

7.6. Executing FLATTEN pass (flatten design).

7.7. Executing DEMINOUT pass (demote inout ports to input or output).

7.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module and2.

7.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \and2..
Removed 0 unused cells and 1 unused wires.
<suppressed ~2 debug messages>

7.10. Executing CHECK pass (checking for obvious problems).
Checking module and2...
Found and reported 0 problems.

7.11. Executing OPT pass (performing simple optimizations).

7.11.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module and2.

7.11.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\and2'.
Removed a total of 0 cells.

7.11.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \and2..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

7.11.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \and2.
Performed a total of 0 changes.

7.11.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\and2'.
Removed a total of 0 cells.

7.11.6. Executing OPT_DFF pass (perform DFF optimizations).

7.11.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \and2..

7.11.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module and2.

7.11.9. Finished OPT passes. (There is nothing left to do.)

7.12. Executing FSM pass (extract and optimize FSM).

7.12.1. Executing FSM_DETECT pass (finding FSMs in design).

7.12.2. Executing FSM_EXTRACT pass (extracting FSM from design).

7.12.3. Executing FSM_OPT pass (simple optimizations of FSMs).

7.12.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \and2..

7.12.5. Executing FSM_OPT pass (simple optimizations of FSMs).

7.12.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

7.12.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

7.12.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

7.13. Executing OPT pass (performing simple optimizations).

7.13.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module and2.

7.13.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\and2'.
Removed a total of 0 cells.

7.13.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \and2..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

7.13.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \and2.
Performed a total of 0 changes.

7.13.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\and2'.
Removed a total of 0 cells.

7.13.6. Executing OPT_DFF pass (perform DFF optimizations).

7.13.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \and2..

7.13.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module and2.

7.13.9. Finished OPT passes. (There is nothing left to do.)

7.14. Executing WREDUCE pass (reducing word size of cells).

7.15. Executing PEEPOPT pass (run peephole optimizers).

7.16. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \and2..

7.17. Executing SHARE pass (SAT-based resource sharing).

7.18. Executing TECHMAP pass (map to technology primitives).

7.18.1. Executing Verilog-2005 frontend: /nfs_scratch/scratch/eda/behzad/bs/Raptor/yosys_verific_rs/yosys/install/share/yosys/cmp2lut.v
Parsing Verilog input from `/nfs_scratch/scratch/eda/behzad/bs/Raptor/yosys_verific_rs/yosys/install/share/yosys/cmp2lut.v' to AST representation.
Generating RTLIL representation for module `\_90_lut_cmp_'.
Successfully finished Verilog frontend.

7.18.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~6 debug messages>

7.19. Executing OPT_EXPR pass (perform const folding).
Optimizing module and2.

7.20. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \and2..

7.21. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module and2:
  created 0 $alu and 0 $macc cells.

7.22. Executing PMUXTREE pass.

7.23. Executing OPT pass (performing simple optimizations).

7.23.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module and2.

7.23.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\and2'.
Removed a total of 0 cells.

7.23.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \and2..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

7.23.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \and2.
Performed a total of 0 changes.

7.23.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\and2'.
Removed a total of 0 cells.

7.23.6. Executing OPT_DFF pass (perform DFF optimizations).

7.23.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \and2..

7.23.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module and2.

7.23.9. Finished OPT passes. (There is nothing left to do.)

7.24. Executing MEMORY pass.

7.24.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

7.24.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
Performed a total of 0 transformations.

7.24.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).

7.24.4. Executing MEMORY_BMUX2ROM pass (converting muxes to ROMs).

7.24.5. Executing MEMORY_DFF pass (merging $dff cells to $memrd).

7.24.6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \and2..

7.24.7. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

7.24.8. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
Performed a total of 0 transformations.

7.24.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \and2..

7.24.10. Executing MEMORY_COLLECT pass (generating $mem cells).

7.25. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \and2..

7.26. Executing QL_BRAM_ASYMMETRIC pass.
<suppressed ~2 debug messages>

7.27. Executing OPT pass (performing simple optimizations).

7.27.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module and2.

7.27.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\and2'.
Removed a total of 0 cells.

7.27.3. Executing OPT_DFF pass (perform DFF optimizations).

7.27.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \and2..

7.27.5. Finished fast OPT passes.

7.28. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).

7.29. Executing OPT pass (performing simple optimizations).

7.29.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module and2.

7.29.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\and2'.
Removed a total of 0 cells.

7.29.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \and2..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

7.29.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \and2.
Performed a total of 0 changes.

7.29.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\and2'.
Removed a total of 0 cells.

7.29.6. Executing OPT_DFF pass (perform DFF optimizations).

7.29.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \and2..

7.29.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module and2.

7.29.9. Finished OPT passes. (There is nothing left to do.)

7.30. Executing TECHMAP pass (map to technology primitives).

7.30.1. Executing Verilog-2005 frontend: /nfs_scratch/scratch/eda/behzad/bs/Raptor/yosys_verific_rs/yosys/install/share/yosys/techmap.v
Parsing Verilog input from `/nfs_scratch/scratch/eda/behzad/bs/Raptor/yosys_verific_rs/yosys/install/share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

7.30.2. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $and.
No more expansions possible.
<suppressed ~72 debug messages>

7.31. Executing OPT pass (performing simple optimizations).

7.31.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module and2.

7.31.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\and2'.
Removed a total of 0 cells.

7.31.3. Executing OPT_DFF pass (perform DFF optimizations).

7.31.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \and2..

7.31.5. Finished fast OPT passes.

7.32. Executing OPT_EXPR pass (perform const folding).
Optimizing module and2.

7.33. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\and2'.
Removed a total of 0 cells.

7.34. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \and2..

7.35. Executing OPT pass (performing simple optimizations).

7.35.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module and2.

7.35.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\and2'.
Removed a total of 0 cells.

7.35.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \and2..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

7.35.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \and2.
Performed a total of 0 changes.

7.35.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\and2'.
Removed a total of 0 cells.

7.35.6. Executing OPT_DFF pass (perform DFF optimizations).

7.35.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \and2..

7.35.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module and2.

7.35.9. Finished OPT passes. (There is nothing left to do.)

7.36. Executing OPT_EXPR pass (perform const folding).
Optimizing module and2.

7.37. Executing SHREGMAP pass (map shift registers).
Converted 0 dff cells into 0 shift registers.

7.38. Executing DFFLEGALIZE pass (convert FFs to types supported by the target).

7.39. Executing TECHMAP pass (map to technology primitives).

7.39.1. Executing Verilog-2005 frontend: /nfs_scratch/scratch/eda/behzad/bs/Raptor/yosys_verific_rs/yosys/install/share/yosys/techmap.v
Parsing Verilog input from `/nfs_scratch/scratch/eda/behzad/bs/Raptor/yosys_verific_rs/yosys/install/share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

7.39.2. Executing Verilog-2005 frontend: /nfs_scratch/scratch/eda/behzad/bs/Raptor/yosys_verific_rs/yosys/install/share/yosys/quicklogic/qlf_k6n10f/ffs_map.v
Parsing Verilog input from `/nfs_scratch/scratch/eda/behzad/bs/Raptor/yosys_verific_rs/yosys/install/share/yosys/quicklogic/qlf_k6n10f/ffs_map.v' to AST representation.
Generating RTLIL representation for module `\$_DFFSRE_PNNP_'.
Generating RTLIL representation for module `\$_DFFSRE_NNNP_'.
Generating RTLIL representation for module `\$_SDFFE_PN0P_'.
Generating RTLIL representation for module `\$_SDFFE_PN1P_'.
Generating RTLIL representation for module `\$_SDFFE_NN0P_'.
Generating RTLIL representation for module `\$_SDFFE_NN1P_'.
Generating RTLIL representation for module `\$_DLATCH_P_'.
Generating RTLIL representation for module `\$_DLATCH_N_'.
Generating RTLIL representation for module `\$_DLATCHSR_PPP_'.
Generating RTLIL representation for module `\$_DLATCHSR_NPP_'.
Generating RTLIL representation for module `\$__SHREG_DFF_P_'.
Successfully finished Verilog frontend.

7.39.3. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~82 debug messages>

7.40. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\and2'.
Removed a total of 0 cells.

7.41. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \and2..

7.42. Executing OPT pass (performing simple optimizations).

7.42.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module and2.

7.42.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\and2'.
Removed a total of 0 cells.

7.42.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \and2..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

7.42.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \and2.
Performed a total of 0 changes.

7.42.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\and2'.
Removed a total of 0 cells.

7.42.6. Executing OPT_DFF pass (perform DFF optimizations).

7.42.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \and2..

7.42.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module and2.

7.42.9. Finished OPT passes. (There is nothing left to do.)

7.43. Executing ABC pass (technology mapping using ABC).

7.43.1. Extracting gate netlist of module `\and2' to `<abc-temp-dir>/input.blif'..
Extracted 1 gates and 3 wires to a netlist network with 2 inputs and 1 outputs.

7.43.1.1. Executing ABC.
Removed 0 unused cells and 3 unused wires.

7.44. Executing OPT_LUT pass (optimize LUTs).
Discovering LUTs.
Number of LUTs:        1
  2-LUT                1

Eliminating LUTs.
Number of LUTs:        1
  2-LUT                1

Combining LUTs.
Number of LUTs:        1
  2-LUT                1

Eliminated 0 LUTs.
Combined 0 LUTs.
<suppressed ~2 debug messages>

7.45. Executing AUTONAME pass.
Renamed 1 objects in module and2 (2 iterations).
<suppressed ~1 debug messages>

7.46. Executing HIERARCHY pass (managing design hierarchy).

7.46.1. Analyzing design hierarchy..
Top module:  \and2

7.46.2. Analyzing design hierarchy..
Top module:  \and2
Removed 0 unused modules.

7.47. Printing statistics.

=== and2 ===

   Number of wires:                  3
   Number of wire bits:              3
   Number of public wires:           3
   Number of public wire bits:       3
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  1
     $lut                            1

7.48. Executing CHECK pass (checking for obvious problems).
Checking module and2...
Found and reported 0 problems.

7.49. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \and2..

7.50. Executing CHECK pass (checking for obvious problems).
Checking module and2...
Found and reported 0 problems.

7.51. Executing BLIF backend.

8. Executing Verilog backend.
Dumping module `\and2'.

Warnings: 1 unique messages, 2 total
End of script. Logfile hash: e02f4f0082, CPU: user 0.17s system 0.01s, MEM: 35.57 MB peak
Yosys 0.18+10 (git sha1 f8419a600, gcc 9.4.0-1ubuntu1~20.04.1 -fPIC -Os)
Time spent: 34% 8x read_verilog (0 sec), 28% 1x abc (0 sec), ...
